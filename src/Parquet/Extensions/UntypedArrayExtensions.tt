// This file is generated with T4
// https://learn.microsoft.com/en-us/visualstudio/modeling/text-template-control-blocks?view=vs-2022
// Because of this, performance is truly great!
// Hint: prefer Rider to edit .tt as it support syntax highlighting
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var types = new[] { "bool?", "byte?", "sbyte?", "short?", "ushort?", "int?", "uint?", "long?", "ulong?", "BigInteger?", "float?", "double?", "decimal?", "DateTime?", "TimeSpan?", "Interval?", "string", "byte[]", "Guid?" }; 

    var net6_types = new[] { "DateOnly?" };
    string nn(string nt) => nt.EndsWith("?") ? nt.Substring(0, nt.Length - 1) : nt;
#>
namespace Parquet.Extensions {

    using System;
    using System.Numerics;
    using Parquet.File.Values.Primitives;

    static class UntypedArrayExtensions {

        #region [ Null Counting ]

        public static int CalculateNullCountFast(this Array array, int offset, int count) {
            Type? t = array.GetType().GetElementType();
            if(t != null && !t.IsNullable()) return 0;

<#
    void CallCalculateNullCount(string[] types)
    {
         foreach(string nt in types) { #>
            if(t == typeof(<#= nt #>)) {
                return CalculateNullCount((<#= nt #>[])array, offset, count);
            }
<#       }        
    }
    CallCalculateNullCount(types); #>
#if NET6_0_OR_GREATER
<#  CallCalculateNullCount(net6_types); #>
#endif            
            throw new NotSupportedException($"cannot count nulls in type {t}");
        }

<#
    void EmitCalculateNullCount(string[] types)
    {
        foreach (string nt in types)
        {
#>
        private static int CalculateNullCount(<#= nt #>[] array, int offset, int count) {
            int r = 0;
            for(int i = offset; i < count; i++) {
                if(array[i] == null) {
                    r++;
                }
            }
            return r;
        }
<#
        }
    }

    EmitCalculateNullCount(types);
#>
#if NET6_0_OR_GREATER
<# EmitCalculateNullCount(net6_types);  #>
#endif
    #endregion

    #region [ Null Packing ]

    public static void PackNullsFast(this Array array,
            int offset, int count,
            Array packedData,
            Span<int> dest,
            int fillerValue) {

            Type? t = array.GetType().GetElementType();
            if(t == null)
                throw new ArgumentException("cannot detect element type", nameof(array));

            if(!t.IsNullable()) {
                Array.Copy(array, offset, packedData, 0, count);
                dest.Fill(fillerValue);
                return;
            }

<#
   void EmitCallPackNullsTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
            if(t == typeof(<#= nt #>)) {
                PackNullsTypeFast((<#= nt #>[])array,
                    offset, count,
                    (<#= nn(nt) #>[])packedData,
                    dest, fillerValue);
                return;
            }
<#
       }
   }
   EmitCallPackNullsTypeFast(types);
#> 
#if NET6_0_OR_GREATER
<# EmitCallPackNullsTypeFast(net6_types); #>
#endif
            throw new NotSupportedException($"cannot pack type {t}");
        }

<# void PackNullsTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
        private static void PackNullsTypeFast(<#= nt #>[] array,
            int offset, int count,
            <#= nn(nt) #>[] packedArray,
            Span<int> dest,
            int fillerValue) {

            for(int i = offset, y = 0, ir = 0; i < (offset + count); i++, y++) {
                <#= nt #> value = array[i];

                if(value == null) {
                    dest[y] = 0;
                }
                else {
                    dest[y] = fillerValue;
                    packedArray[ir++] = (<#= nn(nt) #>)value;
                }
            }
        }

<#       }
   }

   PackNullsTypeFast(types);  #>
#if NET6_0_OR_GREATER
<# PackNullsTypeFast(net6_types);#>
#endif
    #endregion

    #region [ Null Unpacking ]

    public static void UnpackNullsFast(this Array array,
        Span<int> flags, int fillFlag,
        Array result) {

        Type? t = array.GetType().GetElementType();
        if(t == null)
            throw new ArgumentException("cannot detect element type", nameof(array));

        
<#
   void EmitCallUnpackNullsTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
        if(t == typeof(<#= nn(nt) #>)) {
            UnpackNullsTypeFast((<#= nn(nt) #>[])array,
                flags, fillFlag,
                (<#= nt #>[])result);
            return;
        }
<#
       }
   }
   EmitCallUnpackNullsTypeFast(types);
#>
#if NET6_0_OR_GREATER
<# EmitCallUnpackNullsTypeFast(net6_types); #>
#endif            
        throw new NotSupportedException($"cannot pack type {t}");

    }

<#
   void UnpackNullsTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
    private static void UnpackNullsTypeFast(<#= nn(nt) #>[] array,
        Span<int> flags, int fillFlag,
        <#= nt #>[] result) {

        int iarray = 0;
        for(int i = 0; i < flags.Length; i++) {
            int level = flags[i];

            if(level == fillFlag) {
                result[i] = array[iarray++];
            }
        }
    }

<#
       }
   }

   UnpackNullsTypeFast(types);
#>
#if NET6_0_OR_GREATER
<# UnpackNullsTypeFast(net6_types); #>
#endif
    #endregion

    #region [ Dictionary Explosion ]

    public static void ExplodeFast(this Array dictionary,
            Span<int> indexes,
            Array result, int resultOffset, int resultCount) {
        Type? t = dictionary.GetType().GetElementType();
        if(t == null)
            throw new ArgumentException("cannot detect element type", nameof(dictionary));

<#
   void EmitCallExplodeTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
        if(t == typeof(<#= nn(nt) #>)) {
            ExplodeTypeFast((<#= nn(nt) #>[])dictionary,
                indexes, (<#= nn(nt) #>[])result, resultOffset, resultCount);
            return;
        }
<#
       }
   }
   EmitCallExplodeTypeFast(types);
#>
#if NET6_0_OR_GREATER
<# EmitCallExplodeTypeFast(net6_types); #>
#endif            
        throw new NotSupportedException($"cannot pack type {t}");
    }

<#
   void EmitExplodeTypeFast(string[] types)
   {
       foreach (string nt in types)
       {
#>
    private static void ExplodeTypeFast(<#= nn(nt) #>[] dictionary,
        Span<int> indexes,
        <#= nn(nt) #>[] result, int resultOffset, int resultCount) {

        for(int i = 0; i < resultCount; i++) {
            int index = indexes[i];
            if(index < dictionary.Length) {
                // The following is way faster than using Array.Get/SetValue as it avoids boxing (x60 slower)
                // It's still x5 slower than native typed operation as it emits "callvirt" IL instruction
                Array.Copy(dictionary, index, result, resultOffset + i, 1);
            }
        }
    }

<#
       }
   }
   EmitExplodeTypeFast(types);
#>
#if NET6_0_OR_GREATER
<# EmitExplodeTypeFast(net6_types);#>
#endif
    #endregion

    }
}