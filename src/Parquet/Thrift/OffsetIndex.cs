#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{


   public partial class OffsetIndex : TBase
   {

      /// <summary>
      /// PageLocations, ordered by increasing PageLocation.offset. It is required
      /// that page_locations[i].first_row_index &lt; page_locations[i+1].first_row_index.
      /// </summary>
      public List<PageLocation> Page_locations { get; set; }

    public OffsetIndex() {
    }

    public OffsetIndex(List<PageLocation> page_locations) : this() {
      this.Page_locations = page_locations;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_page_locations = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Page_locations = new List<PageLocation>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    PageLocation _elem30;
                    _elem30 = new PageLocation();
                    _elem30.Read(iprot);
                    Page_locations.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
                isset_page_locations = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_page_locations)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OffsetIndex");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "page_locations";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Page_locations.Count));
          foreach (PageLocation _iter31 in Page_locations)
          {
            _iter31.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OffsetIndex(");
      __sb.Append(", Page_locations: ");
      __sb.Append(Page_locations);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member