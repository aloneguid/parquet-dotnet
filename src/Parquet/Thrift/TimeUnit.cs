#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   public partial class TimeUnit : TBase
  {
    private MilliSeconds _MILLIS;
    private MicroSeconds _MICROS;
    private NanoSeconds _NANOS;

    public MilliSeconds MILLIS
    {
      get
      {
        return _MILLIS;
      }
      set
      {
        __isset.MILLIS = true;
        this._MILLIS = value;
      }
    }

    public MicroSeconds MICROS
    {
      get
      {
        return _MICROS;
      }
      set
      {
        __isset.MICROS = true;
        this._MICROS = value;
      }
    }

    public NanoSeconds NANOS
    {
      get
      {
        return _NANOS;
      }
      set
      {
        __isset.NANOS = true;
        this._NANOS = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool MILLIS;
      public bool MICROS;
      public bool NANOS;
    }

    public TimeUnit()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                MILLIS = new MilliSeconds();
                await MILLIS.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                MICROS = new MicroSeconds();
                await MICROS.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                NANOS = new NanoSeconds();
                await NANOS.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TimeUnit");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (MILLIS != null && __isset.MILLIS)
        {
          field.Name = "MILLIS";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MILLIS.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MICROS != null && __isset.MICROS)
        {
          field.Name = "MICROS";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MICROS.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NANOS != null && __isset.NANOS)
        {
          field.Name = "NANOS";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NANOS.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TimeUnit;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.MILLIS == other.__isset.MILLIS) && ((!__isset.MILLIS) || (System.Object.Equals(MILLIS, other.MILLIS))))
        && ((__isset.MICROS == other.__isset.MICROS) && ((!__isset.MICROS) || (System.Object.Equals(MICROS, other.MICROS))))
        && ((__isset.NANOS == other.__isset.NANOS) && ((!__isset.NANOS) || (System.Object.Equals(NANOS, other.NANOS))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.MILLIS)
          hashcode = (hashcode * 397) + MILLIS.GetHashCode();
        if(__isset.MICROS)
          hashcode = (hashcode * 397) + MICROS.GetHashCode();
        if(__isset.NANOS)
          hashcode = (hashcode * 397) + NANOS.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TimeUnit(");
      bool __first = true;
      if (MILLIS != null && __isset.MILLIS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MILLIS: ");
        sb.Append(MILLIS== null ? "<null>" : MILLIS.ToString());
      }
      if (MICROS != null && __isset.MICROS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MICROS: ");
        sb.Append(MICROS== null ? "<null>" : MICROS.ToString());
      }
      if (NANOS != null && __isset.NANOS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NANOS: ");
        sb.Append(NANOS== null ? "<null>" : NANOS.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
