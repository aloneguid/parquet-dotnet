#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Crypto metadata for files with encrypted footer *
   /// </summary>
   public partial class FileCryptoMetaData : TBase
  {
    private byte[] _key_metadata;

    /// <summary>
    /// Encryption algorithm. This field is only used for files
    /// with encrypted footer. Files with plaintext footer store algorithm id
    /// inside footer (FileMetaData structure).
    /// </summary>
    public EncryptionAlgorithm Encryption_algorithm { get; set; }

    /// <summary>
    /// Retrieval metadata of key used for encryption of footer,
    /// and (possibly) columns *
    /// </summary>
    public byte[] Key_metadata
    {
      get
      {
        return _key_metadata;
      }
      set
      {
        __isset.key_metadata = true;
        this._key_metadata = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool key_metadata;
    }

    public FileCryptoMetaData()
    {
    }

    public FileCryptoMetaData(EncryptionAlgorithm encryption_algorithm) : this()
    {
      this.Encryption_algorithm = encryption_algorithm;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_encryption_algorithm = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Encryption_algorithm = new EncryptionAlgorithm();
                await Encryption_algorithm.ReadAsync(iprot, cancellationToken);
                isset_encryption_algorithm = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Key_metadata = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_encryption_algorithm)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("FileCryptoMetaData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "encryption_algorithm";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Encryption_algorithm.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Key_metadata != null && __isset.key_metadata)
        {
          field.Name = "key_metadata";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Key_metadata, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as FileCryptoMetaData;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Encryption_algorithm, other.Encryption_algorithm)
        && ((__isset.key_metadata == other.__isset.key_metadata) && ((!__isset.key_metadata) || (TCollections.Equals(Key_metadata, other.Key_metadata))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Encryption_algorithm.GetHashCode();
        if(__isset.key_metadata)
          hashcode = (hashcode * 397) + Key_metadata.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("FileCryptoMetaData(");
      sb.Append(", Encryption_algorithm: ");
      sb.Append(Encryption_algorithm== null ? "<null>" : Encryption_algorithm.ToString());
      if (Key_metadata != null && __isset.key_metadata)
      {
        sb.Append(", Key_metadata: ");
        sb.Append(Key_metadata);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
