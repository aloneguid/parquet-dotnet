#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{

  /// <summary>
  /// Crypto metadata for files with encrypted footer *
  /// </summary>

  public partial class FileCryptoMetaData : TBase
  {
    private byte[] _key_metadata;

    /// <summary>
    /// Encryption algorithm. This field is only used for files
    /// with encrypted footer. Files with plaintext footer store algorithm id
    /// inside footer (FileMetaData structure).
    /// </summary>
    public EncryptionAlgorithm Encryption_algorithm { get; set; }

    /// <summary>
    /// Retrieval metadata of key used for encryption of footer,
    /// and (possibly) columns *
    /// </summary>
    public byte[] Key_metadata
    {
      get
      {
        return _key_metadata;
      }
      set
      {
        __isset.key_metadata = true;
        this._key_metadata = value;
      }
    }


    public Isset __isset;

    public struct Isset {
      public bool key_metadata;
    }

    public FileCryptoMetaData() {
    }

    public FileCryptoMetaData(EncryptionAlgorithm encryption_algorithm) : this() {
      this.Encryption_algorithm = encryption_algorithm;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_encryption_algorithm = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Encryption_algorithm = new EncryptionAlgorithm();
                Encryption_algorithm.Read(iprot);
                isset_encryption_algorithm = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Key_metadata = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_encryption_algorithm)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FileCryptoMetaData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "encryption_algorithm";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Encryption_algorithm.Write(oprot);
        oprot.WriteFieldEnd();
        if (Key_metadata != null && __isset.key_metadata) {
          field.Name = "key_metadata";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Key_metadata);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FileCryptoMetaData(");
      __sb.Append(", Encryption_algorithm: ");
      __sb.Append(Encryption_algorithm== null ? "<null>" : Encryption_algorithm.ToString());
      if (Key_metadata != null && __isset.key_metadata) {
        __sb.Append(", Key_metadata: ");
        __sb.Append(Key_metadata);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member