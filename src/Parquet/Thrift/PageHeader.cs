#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{
  public partial class PageHeader : TBase
  {
    private int _crc;
    private DataPageHeader _data_page_header;
    private IndexPageHeader _index_page_header;
    private DictionaryPageHeader _dictionary_page_header;
    private DataPageHeaderV2 _data_page_header_v2;

    /// <summary>
    /// the type of the page: indicates which of the *_header fields is set *
    /// 
    /// <seealso cref="PageType"/>
    /// </summary>
    public PageType Type { get; set; }

    /// <summary>
    /// Uncompressed page size in bytes (not including this header) *
    /// </summary>
    public int Uncompressed_page_size { get; set; }

    /// <summary>
    /// Compressed (and potentially encrypted) page size in bytes, not including this header *
    /// </summary>
    public int Compressed_page_size { get; set; }

    /// <summary>
    /// The 32bit CRC for the page, to be be calculated as follows:
    /// - Using the standard CRC32 algorithm
    /// - On the data only, i.e. this header should not be included. 'Data'
    ///   hereby refers to the concatenation of the repetition levels, the
    ///   definition levels and the column value, in this exact order.
    /// - On the encoded versions of the repetition levels, definition levels and
    ///   column values
    /// - On the compressed versions of the repetition levels, definition levels
    ///   and column values where possible;
    ///   - For v1 data pages, the repetition levels, definition levels and column
    ///     values are always compressed together. If a compression scheme is
    ///     specified, the CRC shall be calculated on the compressed version of
    ///     this concatenation. If no compression scheme is specified, the CRC
    ///     shall be calculated on the uncompressed version of this concatenation.
    ///   - For v2 data pages, the repetition levels and definition levels are
    ///     handled separately from the data and are never compressed (only
    ///     encoded). If a compression scheme is specified, the CRC shall be
    ///     calculated on the concatenation of the uncompressed repetition levels,
    ///     uncompressed definition levels and the compressed column values.
    ///     If no compression scheme is specified, the CRC shall be calculated on
    ///     the uncompressed concatenation.
    /// If enabled, this allows for disabling checksumming in HDFS if only a few
    /// pages need to be read.
    /// 
    /// </summary>
    public int Crc
    {
      get
      {
        return _crc;
      }
      set
      {
        __isset.crc = true;
        this._crc = value;
      }
    }

    public DataPageHeader Data_page_header
    {
      get
      {
        return _data_page_header;
      }
      set
      {
        __isset.data_page_header = true;
        this._data_page_header = value;
      }
    }

    public IndexPageHeader Index_page_header
    {
      get
      {
        return _index_page_header;
      }
      set
      {
        __isset.index_page_header = true;
        this._index_page_header = value;
      }
    }

    public DictionaryPageHeader Dictionary_page_header
    {
      get
      {
        return _dictionary_page_header;
      }
      set
      {
        __isset.dictionary_page_header = true;
        this._dictionary_page_header = value;
      }
    }

    public DataPageHeaderV2 Data_page_header_v2
    {
      get
      {
        return _data_page_header_v2;
      }
      set
      {
        __isset.data_page_header_v2 = true;
        this._data_page_header_v2 = value;
      }
    }


    public Isset __isset;
    public struct Isset {
      public bool crc;
      public bool data_page_header;
      public bool index_page_header;
      public bool dictionary_page_header;
      public bool data_page_header_v2;
    }

    public PageHeader() {
    }

    public PageHeader(PageType type, int uncompressed_page_size, int compressed_page_size) : this() {
      this.Type = type;
      this.Uncompressed_page_size = uncompressed_page_size;
      this.Compressed_page_size = compressed_page_size;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        bool isset_uncompressed_page_size = false;
        bool isset_compressed_page_size = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = (PageType)iprot.ReadI32();
                isset_type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Uncompressed_page_size = iprot.ReadI32();
                isset_uncompressed_page_size = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Compressed_page_size = iprot.ReadI32();
                isset_compressed_page_size = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Crc = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Data_page_header = new DataPageHeader();
                Data_page_header.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Index_page_header = new IndexPageHeader();
                Index_page_header.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Dictionary_page_header = new DictionaryPageHeader();
                Dictionary_page_header.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                Data_page_header_v2 = new DataPageHeaderV2();
                Data_page_header_v2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_type)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_uncompressed_page_size)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_compressed_page_size)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PageHeader");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
        field.Name = "uncompressed_page_size";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uncompressed_page_size);
        oprot.WriteFieldEnd();
        field.Name = "compressed_page_size";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Compressed_page_size);
        oprot.WriteFieldEnd();
        if (__isset.crc) {
          field.Name = "crc";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Crc);
          oprot.WriteFieldEnd();
        }
        if (Data_page_header != null && __isset.data_page_header) {
          field.Name = "data_page_header";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Data_page_header.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Index_page_header != null && __isset.index_page_header) {
          field.Name = "index_page_header";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Index_page_header.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Dictionary_page_header != null && __isset.dictionary_page_header) {
          field.Name = "dictionary_page_header";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Dictionary_page_header.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Data_page_header_v2 != null && __isset.data_page_header_v2) {
          field.Name = "data_page_header_v2";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          Data_page_header_v2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PageHeader(");
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", Uncompressed_page_size: ");
      __sb.Append(Uncompressed_page_size);
      __sb.Append(", Compressed_page_size: ");
      __sb.Append(Compressed_page_size);
      if (__isset.crc) {
        __sb.Append(", Crc: ");
        __sb.Append(Crc);
      }
      if (Data_page_header != null && __isset.data_page_header) {
        __sb.Append(", Data_page_header: ");
        __sb.Append(Data_page_header== null ? "<null>" : Data_page_header.ToString());
      }
      if (Index_page_header != null && __isset.index_page_header) {
        __sb.Append(", Index_page_header: ");
        __sb.Append(Index_page_header== null ? "<null>" : Index_page_header.ToString());
      }
      if (Dictionary_page_header != null && __isset.dictionary_page_header) {
        __sb.Append(", Dictionary_page_header: ");
        __sb.Append(Dictionary_page_header== null ? "<null>" : Dictionary_page_header.ToString());
      }
      if (Data_page_header_v2 != null && __isset.data_page_header_v2) {
        __sb.Append(", Data_page_header_v2: ");
        __sb.Append(Data_page_header_v2== null ? "<null>" : Data_page_header_v2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member