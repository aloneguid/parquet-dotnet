#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   public partial class PageLocation : TBase
  {

    /// <summary>
    /// Offset of the page in the file *
    /// </summary>
    public long Offset { get; set; }

    /// <summary>
    /// Size of the page, including header. Sum of compressed_page_size and header
    /// length
    /// </summary>
    public int Compressed_page_size { get; set; }

    /// <summary>
    /// Index within the RowGroup of the first row of the page; this means pages
    /// change on record boundaries (r = 0).
    /// </summary>
    public long First_row_index { get; set; }

    public PageLocation()
    {
    }

    public PageLocation(long offset, int compressed_page_size, long first_row_index) : this()
    {
      this.Offset = offset;
      this.Compressed_page_size = compressed_page_size;
      this.First_row_index = first_row_index;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_offset = false;
        bool isset_compressed_page_size = false;
        bool isset_first_row_index = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Offset = await iprot.ReadI64Async(cancellationToken);
                isset_offset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Compressed_page_size = await iprot.ReadI32Async(cancellationToken);
                isset_compressed_page_size = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                First_row_index = await iprot.ReadI64Async(cancellationToken);
                isset_first_row_index = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_offset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_compressed_page_size)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_first_row_index)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PageLocation");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "offset";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Offset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "compressed_page_size";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Compressed_page_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "first_row_index";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(First_row_index, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as PageLocation;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Offset, other.Offset)
        && System.Object.Equals(Compressed_page_size, other.Compressed_page_size)
        && System.Object.Equals(First_row_index, other.First_row_index);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Offset.GetHashCode();
        hashcode = (hashcode * 397) + Compressed_page_size.GetHashCode();
        hashcode = (hashcode * 397) + First_row_index.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PageLocation(");
      sb.Append(", Offset: ");
      sb.Append(Offset);
      sb.Append(", Compressed_page_size: ");
      sb.Append(Compressed_page_size);
      sb.Append(", First_row_index: ");
      sb.Append(First_row_index);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
