#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Statistics per row group and per page
   /// All fields are optional.
   /// </summary>
   public partial class Statistics : TBase
  {
    private byte[] _max;
    private byte[] _min;
    private long _null_count;
    private long _distinct_count;
    private byte[] _max_value;
    private byte[] _min_value;

    /// <summary>
    /// DEPRECATED: min and max value of the column. Use min_value and max_value.
    /// 
    /// Values are encoded using PLAIN encoding, except that variable-length byte
    /// arrays do not include a length prefix.
    /// 
    /// These fields encode min and max values determined by signed comparison
    /// only. New files should use the correct order for a column's logical type
    /// and store the values in the min_value and max_value fields.
    /// 
    /// To support older readers, these may be set when the column order is
    /// signed.
    /// </summary>
    public byte[] Max
    {
      get
      {
        return _max;
      }
      set
      {
        __isset.max = true;
        this._max = value;
      }
    }

    public byte[] Min
    {
      get
      {
        return _min;
      }
      set
      {
        __isset.min = true;
        this._min = value;
      }
    }

    /// <summary>
    /// count of null value in the column
    /// </summary>
    public long Null_count
    {
      get
      {
        return _null_count;
      }
      set
      {
        __isset.null_count = true;
        this._null_count = value;
      }
    }

    /// <summary>
    /// count of distinct values occurring
    /// </summary>
    public long Distinct_count
    {
      get
      {
        return _distinct_count;
      }
      set
      {
        __isset.distinct_count = true;
        this._distinct_count = value;
      }
    }

    /// <summary>
    /// Min and max values for the column, determined by its ColumnOrder.
    /// 
    /// Values are encoded using PLAIN encoding, except that variable-length byte
    /// arrays do not include a length prefix.
    /// </summary>
    public byte[] Max_value
    {
      get
      {
        return _max_value;
      }
      set
      {
        __isset.max_value = true;
        this._max_value = value;
      }
    }

    public byte[] Min_value
    {
      get
      {
        return _min_value;
      }
      set
      {
        __isset.min_value = true;
        this._min_value = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool max;
      public bool min;
      public bool null_count;
      public bool distinct_count;
      public bool max_value;
      public bool min_value;
    }

    public Statistics()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Max = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Min = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Null_count = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Distinct_count = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Max_value = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Min_value = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Statistics");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Max != null && __isset.max)
        {
          field.Name = "max";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Max, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Min != null && __isset.min)
        {
          field.Name = "min";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Min, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.null_count)
        {
          field.Name = "null_count";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Null_count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.distinct_count)
        {
          field.Name = "distinct_count";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Distinct_count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Max_value != null && __isset.max_value)
        {
          field.Name = "max_value";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Max_value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Min_value != null && __isset.min_value)
        {
          field.Name = "min_value";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Min_value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as Statistics;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.max == other.__isset.max) && ((!__isset.max) || (TCollections.Equals(Max, other.Max))))
        && ((__isset.min == other.__isset.min) && ((!__isset.min) || (TCollections.Equals(Min, other.Min))))
        && ((__isset.null_count == other.__isset.null_count) && ((!__isset.null_count) || (System.Object.Equals(Null_count, other.Null_count))))
        && ((__isset.distinct_count == other.__isset.distinct_count) && ((!__isset.distinct_count) || (System.Object.Equals(Distinct_count, other.Distinct_count))))
        && ((__isset.max_value == other.__isset.max_value) && ((!__isset.max_value) || (TCollections.Equals(Max_value, other.Max_value))))
        && ((__isset.min_value == other.__isset.min_value) && ((!__isset.min_value) || (TCollections.Equals(Min_value, other.Min_value))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.max)
          hashcode = (hashcode * 397) + Max.GetHashCode();
        if(__isset.min)
          hashcode = (hashcode * 397) + Min.GetHashCode();
        if(__isset.null_count)
          hashcode = (hashcode * 397) + Null_count.GetHashCode();
        if(__isset.distinct_count)
          hashcode = (hashcode * 397) + Distinct_count.GetHashCode();
        if(__isset.max_value)
          hashcode = (hashcode * 397) + Max_value.GetHashCode();
        if(__isset.min_value)
          hashcode = (hashcode * 397) + Min_value.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Statistics(");
      bool __first = true;
      if (Max != null && __isset.max)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Max: ");
        sb.Append(Max);
      }
      if (Min != null && __isset.min)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Min: ");
        sb.Append(Min);
      }
      if (__isset.null_count)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Null_count: ");
        sb.Append(Null_count);
      }
      if (__isset.distinct_count)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Distinct_count: ");
        sb.Append(Distinct_count);
      }
      if (Max_value != null && __isset.max_value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Max_value: ");
        sb.Append(Max_value);
      }
      if (Min_value != null && __isset.min_value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Min_value: ");
        sb.Append(Min_value);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
