#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using Thrift.Protocol;

namespace Parquet.Thrift
{

   /// <summary>
   /// Statistics per row group and per page
   /// All fields are optional.
   /// </summary>

   public partial class Statistics : TBase
  {
    private byte[] _max;
    private byte[] _min;
    private long _null_count;
    private long _distinct_count;
    private byte[] _max_value;
    private byte[] _min_value;

    /// <summary>
    /// DEPRECATED: min and max value of the column. Use min_value and max_value.
    /// 
    /// Values are encoded using PLAIN encoding, except that variable-length byte
    /// arrays do not include a length prefix.
    /// 
    /// These fields encode min and max values determined by signed comparison
    /// only. New files should use the correct order for a column's logical type
    /// and store the values in the min_value and max_value fields.
    /// 
    /// To support older readers, these may be set when the column order is
    /// signed.
    /// </summary>
    public byte[] Max
    {
      get
      {
        return _max;
      }
      set
      {
        __isset.max = true;
        this._max = value;
      }
    }

    public byte[] Min
    {
      get
      {
        return _min;
      }
      set
      {
        __isset.min = true;
        this._min = value;
      }
    }

    /// <summary>
    /// count of null value in the column
    /// </summary>
    public long Null_count
    {
      get
      {
        return _null_count;
      }
      set
      {
        __isset.null_count = true;
        this._null_count = value;
      }
    }

    /// <summary>
    /// count of distinct values occurring
    /// </summary>
    public long Distinct_count
    {
      get
      {
        return _distinct_count;
      }
      set
      {
        __isset.distinct_count = true;
        this._distinct_count = value;
      }
    }

    /// <summary>
    /// Min and max values for the column, determined by its ColumnOrder.
    /// 
    /// Values are encoded using PLAIN encoding, except that variable-length byte
    /// arrays do not include a length prefix.
    /// </summary>
    public byte[] Max_value
    {
      get
      {
        return _max_value;
      }
      set
      {
        __isset.max_value = true;
        this._max_value = value;
      }
    }

    public byte[] Min_value
    {
      get
      {
        return _min_value;
      }
      set
      {
        __isset.min_value = true;
        this._min_value = value;
      }
    }


    public Isset __isset;

    public struct Isset {
      public bool max;
      public bool min;
      public bool null_count;
      public bool distinct_count;
      public bool max_value;
      public bool min_value;
    }

    public Statistics() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Max = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Min = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Null_count = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Distinct_count = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Max_value = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Min_value = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Statistics");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Max != null && __isset.max) {
          field.Name = "max";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Max);
          oprot.WriteFieldEnd();
        }
        if (Min != null && __isset.min) {
          field.Name = "min";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Min);
          oprot.WriteFieldEnd();
        }
        if (__isset.null_count) {
          field.Name = "null_count";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Null_count);
          oprot.WriteFieldEnd();
        }
        if (__isset.distinct_count) {
          field.Name = "distinct_count";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Distinct_count);
          oprot.WriteFieldEnd();
        }
        if (Max_value != null && __isset.max_value) {
          field.Name = "max_value";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Max_value);
          oprot.WriteFieldEnd();
        }
        if (Min_value != null && __isset.min_value) {
          field.Name = "min_value";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Min_value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Statistics(");
      bool __first = true;
      if (Max != null && __isset.max) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max: ");
        __sb.Append(Max);
      }
      if (Min != null && __isset.min) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Min: ");
        __sb.Append(Min);
      }
      if (__isset.null_count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Null_count: ");
        __sb.Append(Null_count);
      }
      if (__isset.distinct_count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Distinct_count: ");
        __sb.Append(Distinct_count);
      }
      if (Max_value != null && __isset.max_value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max_value: ");
        __sb.Append(Max_value);
      }
      if (Min_value != null && __isset.min_value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Min_value: ");
        __sb.Append(Min_value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member