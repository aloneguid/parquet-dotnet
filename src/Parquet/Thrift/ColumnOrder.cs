#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Union to specify the order used for the min_value and max_value fields for a
   /// column. This union takes the role of an enhanced enum that allows rich
   /// elements (which will be needed for a collation-based ordering in the future).
   /// 
   /// Possible values are:
   /// * TypeDefinedOrder - the column uses the order defined by its logical or
   ///                      physical type (if there is no logical type).
   /// 
   /// If the reader does not support the value of this union, min and max stats
   /// for this column should be ignored.
   /// </summary>
   public partial class ColumnOrder : TBase
  {
    private TypeDefinedOrder _TYPE_ORDER;

    /// <summary>
    /// The sort orders for logical types are:
    ///   UTF8 - unsigned byte-wise comparison
    ///   INT8 - signed comparison
    ///   INT16 - signed comparison
    ///   INT32 - signed comparison
    ///   INT64 - signed comparison
    ///   UINT8 - unsigned comparison
    ///   UINT16 - unsigned comparison
    ///   UINT32 - unsigned comparison
    ///   UINT64 - unsigned comparison
    ///   DECIMAL - signed comparison of the represented value
    ///   DATE - signed comparison
    ///   TIME_MILLIS - signed comparison
    ///   TIME_MICROS - signed comparison
    ///   TIMESTAMP_MILLIS - signed comparison
    ///   TIMESTAMP_MICROS - signed comparison
    ///   INTERVAL - unsigned comparison
    ///   JSON - unsigned byte-wise comparison
    ///   BSON - unsigned byte-wise comparison
    ///   ENUM - unsigned byte-wise comparison
    ///   LIST - undefined
    ///   MAP - undefined
    /// 
    /// In the absence of logical types, the sort order is determined by the physical type:
    ///   BOOLEAN - false, true
    ///   INT32 - signed comparison
    ///   INT64 - signed comparison
    ///   INT96 (only used for legacy timestamps) - undefined
    ///   FLOAT - signed comparison of the represented value (*)
    ///   DOUBLE - signed comparison of the represented value (*)
    ///   BYTE_ARRAY - unsigned byte-wise comparison
    ///   FIXED_LEN_BYTE_ARRAY - unsigned byte-wise comparison
    /// 
    /// (*) Because the sorting order is not specified properly for floating
    ///     point values (relations vs. total ordering) the following
    ///     compatibility rules should be applied when reading statistics:
    ///     - If the min is a NaN, it should be ignored.
    ///     - If the max is a NaN, it should be ignored.
    ///     - If the min is +0, the row group may contain -0 values as well.
    ///     - If the max is -0, the row group may contain +0 values as well.
    ///     - When looking for NaN values, min and max should be ignored.
    /// </summary>
    public TypeDefinedOrder TYPE_ORDER
    {
      get
      {
        return _TYPE_ORDER;
      }
      set
      {
        __isset.TYPE_ORDER = true;
        this._TYPE_ORDER = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool TYPE_ORDER;
    }

    public ColumnOrder()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                TYPE_ORDER = new TypeDefinedOrder();
                await TYPE_ORDER.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ColumnOrder");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TYPE_ORDER != null && __isset.TYPE_ORDER)
        {
          field.Name = "TYPE_ORDER";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await TYPE_ORDER.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ColumnOrder;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.TYPE_ORDER == other.__isset.TYPE_ORDER) && ((!__isset.TYPE_ORDER) || (System.Object.Equals(TYPE_ORDER, other.TYPE_ORDER))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.TYPE_ORDER)
          hashcode = (hashcode * 397) + TYPE_ORDER.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ColumnOrder(");
      bool __first = true;
      if (TYPE_ORDER != null && __isset.TYPE_ORDER)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TYPE_ORDER: ");
        sb.Append(TYPE_ORDER== null ? "<null>" : TYPE_ORDER.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
