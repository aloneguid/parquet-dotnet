#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{

  /// <summary>
  /// Union to specify the order used for the min_value and max_value fields for a
  /// column. This union takes the role of an enhanced enum that allows rich
  /// elements (which will be needed for a collation-based ordering in the future).
  /// 
  /// Possible values are:
  /// * TypeDefinedOrder - the column uses the order defined by its logical or
  ///                      physical type (if there is no logical type).
  /// 
  /// If the reader does not support the value of this union, min and max stats
  /// for this column should be ignored.
  /// </summary>

  public partial class ColumnOrder : TBase
  {
    private TypeDefinedOrder _TYPE_ORDER;

    /// <summary>
    /// The sort orders for logical types are:
    ///   UTF8 - unsigned byte-wise comparison
    ///   INT8 - signed comparison
    ///   INT16 - signed comparison
    ///   INT32 - signed comparison
    ///   INT64 - signed comparison
    ///   UINT8 - unsigned comparison
    ///   UINT16 - unsigned comparison
    ///   UINT32 - unsigned comparison
    ///   UINT64 - unsigned comparison
    ///   DECIMAL - signed comparison of the represented value
    ///   DATE - signed comparison
    ///   TIME_MILLIS - signed comparison
    ///   TIME_MICROS - signed comparison
    ///   TIMESTAMP_MILLIS - signed comparison
    ///   TIMESTAMP_MICROS - signed comparison
    ///   INTERVAL - unsigned comparison
    ///   JSON - unsigned byte-wise comparison
    ///   BSON - unsigned byte-wise comparison
    ///   ENUM - unsigned byte-wise comparison
    ///   LIST - undefined
    ///   MAP - undefined
    /// 
    /// In the absence of logical types, the sort order is determined by the physical type:
    ///   BOOLEAN - false, true
    ///   INT32 - signed comparison
    ///   INT64 - signed comparison
    ///   INT96 (only used for legacy timestamps) - undefined
    ///   FLOAT - signed comparison of the represented value (*)
    ///   DOUBLE - signed comparison of the represented value (*)
    ///   BYTE_ARRAY - unsigned byte-wise comparison
    ///   FIXED_LEN_BYTE_ARRAY - unsigned byte-wise comparison
    /// 
    /// (*) Because the sorting order is not specified properly for floating
    ///     point values (relations vs. total ordering) the following
    ///     compatibility rules should be applied when reading statistics:
    ///     - If the min is a NaN, it should be ignored.
    ///     - If the max is a NaN, it should be ignored.
    ///     - If the min is +0, the row group may contain -0 values as well.
    ///     - If the max is -0, the row group may contain +0 values as well.
    ///     - When looking for NaN values, min and max should be ignored.
    /// </summary>
    public TypeDefinedOrder TYPE_ORDER
    {
      get
      {
        return _TYPE_ORDER;
      }
      set
      {
        __isset.TYPE_ORDER = true;
        this._TYPE_ORDER = value;
      }
    }


    public Isset __isset;

    public struct Isset {
      public bool TYPE_ORDER;
    }

    public ColumnOrder() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TYPE_ORDER = new TypeDefinedOrder();
                TYPE_ORDER.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ColumnOrder");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TYPE_ORDER != null && __isset.TYPE_ORDER) {
          field.Name = "TYPE_ORDER";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TYPE_ORDER.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnOrder(");
      bool __first = true;
      if (TYPE_ORDER != null && __isset.TYPE_ORDER) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TYPE_ORDER: ");
        __sb.Append(TYPE_ORDER== null ? "<null>" : TYPE_ORDER.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member