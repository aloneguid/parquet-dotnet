#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   public partial class ColumnChunk : TBase
  {
    private string _file_path;
    private ColumnMetaData _meta_data;
    private long _offset_index_offset;
    private int _offset_index_length;
    private long _column_index_offset;
    private int _column_index_length;
    private ColumnCryptoMetaData _crypto_metadata;
    private byte[] _encrypted_column_metadata;

    /// <summary>
    /// File where column data is stored.  If not set, assumed to be same file as
    /// metadata.  This path is relative to the current file.
    /// 
    /// </summary>
    public string File_path
    {
      get
      {
        return _file_path;
      }
      set
      {
        __isset.file_path = true;
        this._file_path = value;
      }
    }

    /// <summary>
    /// Byte offset in file_path to the ColumnMetaData *
    /// </summary>
    public long File_offset { get; set; }

    /// <summary>
    /// Column metadata for this chunk. This is the same content as what is at
    /// file_path/file_offset.  Having it here has it replicated in the file
    /// metadata.
    /// 
    /// </summary>
    public ColumnMetaData Meta_data
    {
      get
      {
        return _meta_data;
      }
      set
      {
        __isset.meta_data = true;
        this._meta_data = value;
      }
    }

    /// <summary>
    /// File offset of ColumnChunk's OffsetIndex *
    /// </summary>
    public long Offset_index_offset
    {
      get
      {
        return _offset_index_offset;
      }
      set
      {
        __isset.offset_index_offset = true;
        this._offset_index_offset = value;
      }
    }

    /// <summary>
    /// Size of ColumnChunk's OffsetIndex, in bytes *
    /// </summary>
    public int Offset_index_length
    {
      get
      {
        return _offset_index_length;
      }
      set
      {
        __isset.offset_index_length = true;
        this._offset_index_length = value;
      }
    }

    /// <summary>
    /// File offset of ColumnChunk's ColumnIndex *
    /// </summary>
    public long Column_index_offset
    {
      get
      {
        return _column_index_offset;
      }
      set
      {
        __isset.column_index_offset = true;
        this._column_index_offset = value;
      }
    }

    /// <summary>
    /// Size of ColumnChunk's ColumnIndex, in bytes *
    /// </summary>
    public int Column_index_length
    {
      get
      {
        return _column_index_length;
      }
      set
      {
        __isset.column_index_length = true;
        this._column_index_length = value;
      }
    }

    /// <summary>
    /// Crypto metadata of encrypted columns *
    /// </summary>
    public ColumnCryptoMetaData Crypto_metadata
    {
      get
      {
        return _crypto_metadata;
      }
      set
      {
        __isset.crypto_metadata = true;
        this._crypto_metadata = value;
      }
    }

    /// <summary>
    /// Encrypted column metadata for this chunk *
    /// </summary>
    public byte[] Encrypted_column_metadata
    {
      get
      {
        return _encrypted_column_metadata;
      }
      set
      {
        __isset.encrypted_column_metadata = true;
        this._encrypted_column_metadata = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool file_path;
      public bool meta_data;
      public bool offset_index_offset;
      public bool offset_index_length;
      public bool column_index_offset;
      public bool column_index_length;
      public bool crypto_metadata;
      public bool encrypted_column_metadata;
    }

    public ColumnChunk()
    {
    }

    public ColumnChunk(long file_offset) : this()
    {
      this.File_offset = file_offset;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_file_offset = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                File_path = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                File_offset = await iprot.ReadI64Async(cancellationToken);
                isset_file_offset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Meta_data = new ColumnMetaData();
                await Meta_data.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Offset_index_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Offset_index_length = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Column_index_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Column_index_length = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                Crypto_metadata = new ColumnCryptoMetaData();
                await Crypto_metadata.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Encrypted_column_metadata = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_file_offset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ColumnChunk");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (File_path != null && __isset.file_path)
        {
          field.Name = "file_path";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(File_path, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "file_offset";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(File_offset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Meta_data != null && __isset.meta_data)
        {
          field.Name = "meta_data";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Meta_data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.offset_index_offset)
        {
          field.Name = "offset_index_offset";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Offset_index_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.offset_index_length)
        {
          field.Name = "offset_index_length";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Offset_index_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.column_index_offset)
        {
          field.Name = "column_index_offset";
          field.Type = TType.I64;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Column_index_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.column_index_length)
        {
          field.Name = "column_index_length";
          field.Type = TType.I32;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Column_index_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Crypto_metadata != null && __isset.crypto_metadata)
        {
          field.Name = "crypto_metadata";
          field.Type = TType.Struct;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Crypto_metadata.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Encrypted_column_metadata != null && __isset.encrypted_column_metadata)
        {
          field.Name = "encrypted_column_metadata";
          field.Type = TType.String;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Encrypted_column_metadata, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ColumnChunk;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.file_path == other.__isset.file_path) && ((!__isset.file_path) || (System.Object.Equals(File_path, other.File_path))))
        && System.Object.Equals(File_offset, other.File_offset)
        && ((__isset.meta_data == other.__isset.meta_data) && ((!__isset.meta_data) || (System.Object.Equals(Meta_data, other.Meta_data))))
        && ((__isset.offset_index_offset == other.__isset.offset_index_offset) && ((!__isset.offset_index_offset) || (System.Object.Equals(Offset_index_offset, other.Offset_index_offset))))
        && ((__isset.offset_index_length == other.__isset.offset_index_length) && ((!__isset.offset_index_length) || (System.Object.Equals(Offset_index_length, other.Offset_index_length))))
        && ((__isset.column_index_offset == other.__isset.column_index_offset) && ((!__isset.column_index_offset) || (System.Object.Equals(Column_index_offset, other.Column_index_offset))))
        && ((__isset.column_index_length == other.__isset.column_index_length) && ((!__isset.column_index_length) || (System.Object.Equals(Column_index_length, other.Column_index_length))))
        && ((__isset.crypto_metadata == other.__isset.crypto_metadata) && ((!__isset.crypto_metadata) || (System.Object.Equals(Crypto_metadata, other.Crypto_metadata))))
        && ((__isset.encrypted_column_metadata == other.__isset.encrypted_column_metadata) && ((!__isset.encrypted_column_metadata) || (TCollections.Equals(Encrypted_column_metadata, other.Encrypted_column_metadata))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.file_path)
          hashcode = (hashcode * 397) + File_path.GetHashCode();
        hashcode = (hashcode * 397) + File_offset.GetHashCode();
        if(__isset.meta_data)
          hashcode = (hashcode * 397) + Meta_data.GetHashCode();
        if(__isset.offset_index_offset)
          hashcode = (hashcode * 397) + Offset_index_offset.GetHashCode();
        if(__isset.offset_index_length)
          hashcode = (hashcode * 397) + Offset_index_length.GetHashCode();
        if(__isset.column_index_offset)
          hashcode = (hashcode * 397) + Column_index_offset.GetHashCode();
        if(__isset.column_index_length)
          hashcode = (hashcode * 397) + Column_index_length.GetHashCode();
        if(__isset.crypto_metadata)
          hashcode = (hashcode * 397) + Crypto_metadata.GetHashCode();
        if(__isset.encrypted_column_metadata)
          hashcode = (hashcode * 397) + Encrypted_column_metadata.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ColumnChunk(");
      bool __first = true;
      if (File_path != null && __isset.file_path)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("File_path: ");
        sb.Append(File_path);
      }
      if(!__first) { sb.Append(", "); }
      sb.Append("File_offset: ");
      sb.Append(File_offset);
      if (Meta_data != null && __isset.meta_data)
      {
        sb.Append(", Meta_data: ");
        sb.Append(Meta_data== null ? "<null>" : Meta_data.ToString());
      }
      if (__isset.offset_index_offset)
      {
        sb.Append(", Offset_index_offset: ");
        sb.Append(Offset_index_offset);
      }
      if (__isset.offset_index_length)
      {
        sb.Append(", Offset_index_length: ");
        sb.Append(Offset_index_length);
      }
      if (__isset.column_index_offset)
      {
        sb.Append(", Column_index_offset: ");
        sb.Append(Column_index_offset);
      }
      if (__isset.column_index_length)
      {
        sb.Append(", Column_index_length: ");
        sb.Append(Column_index_length);
      }
      if (Crypto_metadata != null && __isset.crypto_metadata)
      {
        sb.Append(", Crypto_metadata: ");
        sb.Append(Crypto_metadata== null ? "<null>" : Crypto_metadata.ToString());
      }
      if (Encrypted_column_metadata != null && __isset.encrypted_column_metadata)
      {
        sb.Append(", Encrypted_column_metadata: ");
        sb.Append(Encrypted_column_metadata);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
