#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{


  public partial class EncryptionWithColumnKey : TBase
  {
    private byte[] _key_metadata;

    /// <summary>
    /// Column path in schema *
    /// </summary>
    public List<string> Path_in_schema { get; set; }

    /// <summary>
    /// Retrieval metadata of column encryption key *
    /// </summary>
    public byte[] Key_metadata
    {
      get
      {
        return _key_metadata;
      }
      set
      {
        __isset.key_metadata = true;
        this._key_metadata = value;
      }
    }


    public Isset __isset;

    public struct Isset {
      public bool key_metadata;
    }

    public EncryptionWithColumnKey() {
    }

    public EncryptionWithColumnKey(List<string> path_in_schema) : this() {
      this.Path_in_schema = path_in_schema;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_path_in_schema = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Path_in_schema = new List<string>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = iprot.ReadString();
                    Path_in_schema.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
                isset_path_in_schema = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Key_metadata = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_path_in_schema)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("EncryptionWithColumnKey");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "path_in_schema";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Path_in_schema.Count));
          foreach (string _iter19 in Path_in_schema)
          {
            oprot.WriteString(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Key_metadata != null && __isset.key_metadata) {
          field.Name = "key_metadata";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Key_metadata);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("EncryptionWithColumnKey(");
      __sb.Append(", Path_in_schema: ");
      __sb.Append(Path_in_schema);
      if (Key_metadata != null && __isset.key_metadata) {
        __sb.Append(", Key_metadata: ");
        __sb.Append(Key_metadata);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member