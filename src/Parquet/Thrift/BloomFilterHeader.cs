#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Bloom filter header is stored at beginning of Bloom filter data of each column
   /// and followed by its bitset.
   /// 
   /// </summary>
   public partial class BloomFilterHeader : TBase
  {

    /// <summary>
    /// The size of bitset in bytes *
    /// </summary>
    public int NumBytes { get; set; }

    /// <summary>
    /// The algorithm for setting bits. *
    /// </summary>
    public BloomFilterAlgorithm Algorithm { get; set; }

    /// <summary>
    /// The hash function used for Bloom filter. *
    /// </summary>
    public BloomFilterHash Hash { get; set; }

    /// <summary>
    /// The compression used in the Bloom filter *
    /// </summary>
    public BloomFilterCompression Compression { get; set; }

    public BloomFilterHeader()
    {
    }

    public BloomFilterHeader(int numBytes, BloomFilterAlgorithm algorithm, BloomFilterHash hash, BloomFilterCompression compression) : this()
    {
      this.NumBytes = numBytes;
      this.Algorithm = algorithm;
      this.Hash = hash;
      this.Compression = compression;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_numBytes = false;
        bool isset_algorithm = false;
        bool isset_hash = false;
        bool isset_compression = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                NumBytes = await iprot.ReadI32Async(cancellationToken);
                isset_numBytes = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Algorithm = new BloomFilterAlgorithm();
                await Algorithm.ReadAsync(iprot, cancellationToken);
                isset_algorithm = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Hash = new BloomFilterHash();
                await Hash.ReadAsync(iprot, cancellationToken);
                isset_hash = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Compression = new BloomFilterCompression();
                await Compression.ReadAsync(iprot, cancellationToken);
                isset_compression = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_numBytes)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_algorithm)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hash)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_compression)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BloomFilterHeader");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "numBytes";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(NumBytes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "algorithm";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Algorithm.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "hash";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Hash.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "compression";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Compression.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as BloomFilterHeader;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(NumBytes, other.NumBytes)
        && System.Object.Equals(Algorithm, other.Algorithm)
        && System.Object.Equals(Hash, other.Hash)
        && System.Object.Equals(Compression, other.Compression);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + NumBytes.GetHashCode();
        hashcode = (hashcode * 397) + Algorithm.GetHashCode();
        hashcode = (hashcode * 397) + Hash.GetHashCode();
        hashcode = (hashcode * 397) + Compression.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BloomFilterHeader(");
      sb.Append(", NumBytes: ");
      sb.Append(NumBytes);
      sb.Append(", Algorithm: ");
      sb.Append(Algorithm== null ? "<null>" : Algorithm.ToString());
      sb.Append(", Hash: ");
      sb.Append(Hash== null ? "<null>" : Hash.ToString());
      sb.Append(", Compression: ");
      sb.Append(Compression== null ? "<null>" : Compression.ToString());
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
