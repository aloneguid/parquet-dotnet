#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{

  /// <summary>
  /// Bloom filter header is stored at beginning of Bloom filter data of each column
  /// and followed by its bitset.
  /// 
  /// </summary>
  public partial class BloomFilterHeader : TBase
  {

    /// <summary>
    /// The size of bitset in bytes *
    /// </summary>
    public int NumBytes { get; set; }

    /// <summary>
    /// The algorithm for setting bits. *
    /// </summary>
    public BloomFilterAlgorithm Algorithm { get; set; }

    /// <summary>
    /// The hash function used for Bloom filter. *
    /// </summary>
    public BloomFilterHash Hash { get; set; }

    /// <summary>
    /// The compression used in the Bloom filter *
    /// </summary>
    public BloomFilterCompression Compression { get; set; }

    public BloomFilterHeader() {
    }

    public BloomFilterHeader(int numBytes, BloomFilterAlgorithm algorithm, BloomFilterHash hash, BloomFilterCompression compression) : this() {
      this.NumBytes = numBytes;
      this.Algorithm = algorithm;
      this.Hash = hash;
      this.Compression = compression;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_numBytes = false;
        bool isset_algorithm = false;
        bool isset_hash = false;
        bool isset_compression = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                NumBytes = iprot.ReadI32();
                isset_numBytes = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Algorithm = new BloomFilterAlgorithm();
                Algorithm.Read(iprot);
                isset_algorithm = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Hash = new BloomFilterHash();
                Hash.Read(iprot);
                isset_hash = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Compression = new BloomFilterCompression();
                Compression.Read(iprot);
                isset_compression = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_numBytes)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_algorithm)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_hash)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_compression)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BloomFilterHeader");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "numBytes";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumBytes);
        oprot.WriteFieldEnd();
        field.Name = "algorithm";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Algorithm.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "hash";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Hash.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "compression";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Compression.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BloomFilterHeader(");
      __sb.Append(", NumBytes: ");
      __sb.Append(NumBytes);
      __sb.Append(", Algorithm: ");
      __sb.Append(Algorithm== null ? "<null>" : Algorithm.ToString());
      __sb.Append(", Hash: ");
      __sb.Append(Hash== null ? "<null>" : Hash.ToString());
      __sb.Append(", Compression: ");
      __sb.Append(Compression== null ? "<null>" : Compression.ToString());
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member