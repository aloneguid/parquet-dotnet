#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// LogicalType annotations to replace ConvertedType.
   /// 
   /// To maintain compatibility, implementations using LogicalType for a
   /// SchemaElement must also set the corresponding ConvertedType from the
   /// following table.
   /// </summary>
   public partial class LogicalType : TBase
  {
    private StringType _STRING;
    private MapType _MAP;
    private ListType _LIST;
    private EnumType _ENUM;
    private DecimalType _DECIMAL;
    private DateType _DATE;
    private TimeType _TIME;
    private TimestampType _TIMESTAMP;
    private IntType _INTEGER;
    private NullType _UNKNOWN;
    private JsonType _JSON;
    private BsonType _BSON;
    private UUIDType _UUID;

    public StringType STRING
    {
      get
      {
        return _STRING;
      }
      set
      {
        __isset.@STRING = true;
        this._STRING = value;
      }
    }

    public MapType MAP
    {
      get
      {
        return _MAP;
      }
      set
      {
        __isset.MAP = true;
        this._MAP = value;
      }
    }

    public ListType LIST
    {
      get
      {
        return _LIST;
      }
      set
      {
        __isset.LIST = true;
        this._LIST = value;
      }
    }

    public EnumType ENUM
    {
      get
      {
        return _ENUM;
      }
      set
      {
        __isset.@ENUM = true;
        this._ENUM = value;
      }
    }

    public DecimalType DECIMAL
    {
      get
      {
        return _DECIMAL;
      }
      set
      {
        __isset.@DECIMAL = true;
        this._DECIMAL = value;
      }
    }

    public DateType DATE
    {
      get
      {
        return _DATE;
      }
      set
      {
        __isset.DATE = true;
        this._DATE = value;
      }
    }

    public TimeType TIME
    {
      get
      {
        return _TIME;
      }
      set
      {
        __isset.TIME = true;
        this._TIME = value;
      }
    }

    public TimestampType TIMESTAMP
    {
      get
      {
        return _TIMESTAMP;
      }
      set
      {
        __isset.TIMESTAMP = true;
        this._TIMESTAMP = value;
      }
    }

    public IntType INTEGER
    {
      get
      {
        return _INTEGER;
      }
      set
      {
        __isset.INTEGER = true;
        this._INTEGER = value;
      }
    }

    public NullType UNKNOWN
    {
      get
      {
        return _UNKNOWN;
      }
      set
      {
        __isset.UNKNOWN = true;
        this._UNKNOWN = value;
      }
    }

    public JsonType JSON
    {
      get
      {
        return _JSON;
      }
      set
      {
        __isset.JSON = true;
        this._JSON = value;
      }
    }

    public BsonType BSON
    {
      get
      {
        return _BSON;
      }
      set
      {
        __isset.BSON = true;
        this._BSON = value;
      }
    }

    public UUIDType UUID
    {
      get
      {
        return _UUID;
      }
      set
      {
        __isset.UUID = true;
        this._UUID = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @STRING;
      public bool MAP;
      public bool LIST;
      public bool @ENUM;
      public bool @DECIMAL;
      public bool DATE;
      public bool TIME;
      public bool TIMESTAMP;
      public bool INTEGER;
      public bool UNKNOWN;
      public bool JSON;
      public bool BSON;
      public bool UUID;
    }

    public LogicalType()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                STRING = new StringType();
                await STRING.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                MAP = new MapType();
                await MAP.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                LIST = new ListType();
                await LIST.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                ENUM = new EnumType();
                await ENUM.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                DECIMAL = new DecimalType();
                await DECIMAL.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                DATE = new DateType();
                await DATE.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                TIME = new TimeType();
                await TIME.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                TIMESTAMP = new TimestampType();
                await TIMESTAMP.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                INTEGER = new IntType();
                await INTEGER.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Struct)
              {
                UNKNOWN = new NullType();
                await UNKNOWN.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Struct)
              {
                JSON = new JsonType();
                await JSON.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Struct)
              {
                BSON = new BsonType();
                await BSON.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Struct)
              {
                UUID = new UUIDType();
                await UUID.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("LogicalType");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (STRING != null && __isset.@STRING)
        {
          field.Name = "STRING";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await STRING.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MAP != null && __isset.MAP)
        {
          field.Name = "MAP";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MAP.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (LIST != null && __isset.LIST)
        {
          field.Name = "LIST";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await LIST.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ENUM != null && __isset.@ENUM)
        {
          field.Name = "ENUM";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await ENUM.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DECIMAL != null && __isset.@DECIMAL)
        {
          field.Name = "DECIMAL";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await DECIMAL.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DATE != null && __isset.DATE)
        {
          field.Name = "DATE";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await DATE.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TIME != null && __isset.TIME)
        {
          field.Name = "TIME";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await TIME.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TIMESTAMP != null && __isset.TIMESTAMP)
        {
          field.Name = "TIMESTAMP";
          field.Type = TType.Struct;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await TIMESTAMP.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (INTEGER != null && __isset.INTEGER)
        {
          field.Name = "INTEGER";
          field.Type = TType.Struct;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await INTEGER.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UNKNOWN != null && __isset.UNKNOWN)
        {
          field.Name = "UNKNOWN";
          field.Type = TType.Struct;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await UNKNOWN.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (JSON != null && __isset.JSON)
        {
          field.Name = "JSON";
          field.Type = TType.Struct;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await JSON.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (BSON != null && __isset.BSON)
        {
          field.Name = "BSON";
          field.Type = TType.Struct;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await BSON.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (UUID != null && __isset.UUID)
        {
          field.Name = "UUID";
          field.Type = TType.Struct;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await UUID.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as LogicalType;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@STRING == other.__isset.@STRING) && ((!__isset.@STRING) || (System.Object.Equals(STRING, other.STRING))))
        && ((__isset.MAP == other.__isset.MAP) && ((!__isset.MAP) || (System.Object.Equals(MAP, other.MAP))))
        && ((__isset.LIST == other.__isset.LIST) && ((!__isset.LIST) || (System.Object.Equals(LIST, other.LIST))))
        && ((__isset.@ENUM == other.__isset.@ENUM) && ((!__isset.@ENUM) || (System.Object.Equals(ENUM, other.ENUM))))
        && ((__isset.@DECIMAL == other.__isset.@DECIMAL) && ((!__isset.@DECIMAL) || (System.Object.Equals(DECIMAL, other.DECIMAL))))
        && ((__isset.DATE == other.__isset.DATE) && ((!__isset.DATE) || (System.Object.Equals(DATE, other.DATE))))
        && ((__isset.TIME == other.__isset.TIME) && ((!__isset.TIME) || (System.Object.Equals(TIME, other.TIME))))
        && ((__isset.TIMESTAMP == other.__isset.TIMESTAMP) && ((!__isset.TIMESTAMP) || (System.Object.Equals(TIMESTAMP, other.TIMESTAMP))))
        && ((__isset.INTEGER == other.__isset.INTEGER) && ((!__isset.INTEGER) || (System.Object.Equals(INTEGER, other.INTEGER))))
        && ((__isset.UNKNOWN == other.__isset.UNKNOWN) && ((!__isset.UNKNOWN) || (System.Object.Equals(UNKNOWN, other.UNKNOWN))))
        && ((__isset.JSON == other.__isset.JSON) && ((!__isset.JSON) || (System.Object.Equals(JSON, other.JSON))))
        && ((__isset.BSON == other.__isset.BSON) && ((!__isset.BSON) || (System.Object.Equals(BSON, other.BSON))))
        && ((__isset.UUID == other.__isset.UUID) && ((!__isset.UUID) || (System.Object.Equals(UUID, other.UUID))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.@STRING)
          hashcode = (hashcode * 397) + STRING.GetHashCode();
        if(__isset.MAP)
          hashcode = (hashcode * 397) + MAP.GetHashCode();
        if(__isset.LIST)
          hashcode = (hashcode * 397) + LIST.GetHashCode();
        if(__isset.@ENUM)
          hashcode = (hashcode * 397) + ENUM.GetHashCode();
        if(__isset.@DECIMAL)
          hashcode = (hashcode * 397) + DECIMAL.GetHashCode();
        if(__isset.DATE)
          hashcode = (hashcode * 397) + DATE.GetHashCode();
        if(__isset.TIME)
          hashcode = (hashcode * 397) + TIME.GetHashCode();
        if(__isset.TIMESTAMP)
          hashcode = (hashcode * 397) + TIMESTAMP.GetHashCode();
        if(__isset.INTEGER)
          hashcode = (hashcode * 397) + INTEGER.GetHashCode();
        if(__isset.UNKNOWN)
          hashcode = (hashcode * 397) + UNKNOWN.GetHashCode();
        if(__isset.JSON)
          hashcode = (hashcode * 397) + JSON.GetHashCode();
        if(__isset.BSON)
          hashcode = (hashcode * 397) + BSON.GetHashCode();
        if(__isset.UUID)
          hashcode = (hashcode * 397) + UUID.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("LogicalType(");
      bool __first = true;
      if (STRING != null && __isset.@STRING)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("STRING: ");
        sb.Append(STRING== null ? "<null>" : STRING.ToString());
      }
      if (MAP != null && __isset.MAP)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MAP: ");
        sb.Append(MAP== null ? "<null>" : MAP.ToString());
      }
      if (LIST != null && __isset.LIST)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LIST: ");
        sb.Append(LIST== null ? "<null>" : LIST.ToString());
      }
      if (ENUM != null && __isset.@ENUM)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ENUM: ");
        sb.Append(ENUM== null ? "<null>" : ENUM.ToString());
      }
      if (DECIMAL != null && __isset.@DECIMAL)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DECIMAL: ");
        sb.Append(DECIMAL== null ? "<null>" : DECIMAL.ToString());
      }
      if (DATE != null && __isset.DATE)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DATE: ");
        sb.Append(DATE== null ? "<null>" : DATE.ToString());
      }
      if (TIME != null && __isset.TIME)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TIME: ");
        sb.Append(TIME== null ? "<null>" : TIME.ToString());
      }
      if (TIMESTAMP != null && __isset.TIMESTAMP)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TIMESTAMP: ");
        sb.Append(TIMESTAMP== null ? "<null>" : TIMESTAMP.ToString());
      }
      if (INTEGER != null && __isset.INTEGER)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("INTEGER: ");
        sb.Append(INTEGER== null ? "<null>" : INTEGER.ToString());
      }
      if (UNKNOWN != null && __isset.UNKNOWN)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UNKNOWN: ");
        sb.Append(UNKNOWN== null ? "<null>" : UNKNOWN.ToString());
      }
      if (JSON != null && __isset.JSON)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("JSON: ");
        sb.Append(JSON== null ? "<null>" : JSON.ToString());
      }
      if (BSON != null && __isset.BSON)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BSON: ");
        sb.Append(BSON== null ? "<null>" : BSON.ToString());
      }
      if (UUID != null && __isset.UUID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UUID: ");
        sb.Append(UUID== null ? "<null>" : UUID.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
