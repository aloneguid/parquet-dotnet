#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{

  /// <summary>
  /// LogicalType annotations to replace ConvertedType.
  /// 
  /// To maintain compatibility, implementations using LogicalType for a
  /// SchemaElement must also set the corresponding ConvertedType from the
  /// following table.
  /// </summary>

  public partial class LogicalType : TBase
  {
    private StringType _STRING;
    private MapType _MAP;
    private ListType _LIST;
    private EnumType _ENUM;
    private DecimalType _DECIMAL;
    private DateType _DATE;
    private TimeType _TIME;
    private TimestampType _TIMESTAMP;
    private IntType _INTEGER;
    private NullType _UNKNOWN;
    private JsonType _JSON;
    private BsonType _BSON;
    private UUIDType _UUID;

    public StringType STRING
    {
      get
      {
        return _STRING;
      }
      set
      {
        __isset.@STRING = true;
        this._STRING = value;
      }
    }

    public MapType MAP
    {
      get
      {
        return _MAP;
      }
      set
      {
        __isset.MAP = true;
        this._MAP = value;
      }
    }

    public ListType LIST
    {
      get
      {
        return _LIST;
      }
      set
      {
        __isset.LIST = true;
        this._LIST = value;
      }
    }

    public EnumType ENUM
    {
      get
      {
        return _ENUM;
      }
      set
      {
        __isset.@ENUM = true;
        this._ENUM = value;
      }
    }

    public DecimalType DECIMAL
    {
      get
      {
        return _DECIMAL;
      }
      set
      {
        __isset.@DECIMAL = true;
        this._DECIMAL = value;
      }
    }

    public DateType DATE
    {
      get
      {
        return _DATE;
      }
      set
      {
        __isset.DATE = true;
        this._DATE = value;
      }
    }

    public TimeType TIME
    {
      get
      {
        return _TIME;
      }
      set
      {
        __isset.TIME = true;
        this._TIME = value;
      }
    }

    public TimestampType TIMESTAMP
    {
      get
      {
        return _TIMESTAMP;
      }
      set
      {
        __isset.TIMESTAMP = true;
        this._TIMESTAMP = value;
      }
    }

    public IntType INTEGER
    {
      get
      {
        return _INTEGER;
      }
      set
      {
        __isset.INTEGER = true;
        this._INTEGER = value;
      }
    }

    public NullType UNKNOWN
    {
      get
      {
        return _UNKNOWN;
      }
      set
      {
        __isset.UNKNOWN = true;
        this._UNKNOWN = value;
      }
    }

    public JsonType JSON
    {
      get
      {
        return _JSON;
      }
      set
      {
        __isset.JSON = true;
        this._JSON = value;
      }
    }

    public BsonType BSON
    {
      get
      {
        return _BSON;
      }
      set
      {
        __isset.BSON = true;
        this._BSON = value;
      }
    }

    public UUIDType UUID
    {
      get
      {
        return _UUID;
      }
      set
      {
        __isset.UUID = true;
        this._UUID = value;
      }
    }


    public Isset __isset;

    public struct Isset {
      public bool @STRING;
      public bool MAP;
      public bool LIST;
      public bool @ENUM;
      public bool @DECIMAL;
      public bool DATE;
      public bool TIME;
      public bool TIMESTAMP;
      public bool INTEGER;
      public bool UNKNOWN;
      public bool JSON;
      public bool BSON;
      public bool UUID;
    }

    public LogicalType() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                STRING = new StringType();
                STRING.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MAP = new MapType();
                MAP.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                LIST = new ListType();
                LIST.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                ENUM = new EnumType();
                ENUM.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DECIMAL = new DecimalType();
                DECIMAL.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DATE = new DateType();
                DATE.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                TIME = new TimeType();
                TIME.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                TIMESTAMP = new TimestampType();
                TIMESTAMP.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                INTEGER = new IntType();
                INTEGER.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                UNKNOWN = new NullType();
                UNKNOWN.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                JSON = new JsonType();
                JSON.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                BSON = new BsonType();
                BSON.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                UUID = new UUIDType();
                UUID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("LogicalType");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (STRING != null && __isset.@STRING) {
          field.Name = "STRING";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          STRING.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MAP != null && __isset.MAP) {
          field.Name = "MAP";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MAP.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LIST != null && __isset.LIST) {
          field.Name = "LIST";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          LIST.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ENUM != null && __isset.@ENUM) {
          field.Name = "ENUM";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          ENUM.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DECIMAL != null && __isset.@DECIMAL) {
          field.Name = "DECIMAL";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DECIMAL.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DATE != null && __isset.DATE) {
          field.Name = "DATE";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DATE.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TIME != null && __isset.TIME) {
          field.Name = "TIME";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          TIME.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TIMESTAMP != null && __isset.TIMESTAMP) {
          field.Name = "TIMESTAMP";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          TIMESTAMP.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (INTEGER != null && __isset.INTEGER) {
          field.Name = "INTEGER";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          INTEGER.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UNKNOWN != null && __isset.UNKNOWN) {
          field.Name = "UNKNOWN";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          UNKNOWN.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (JSON != null && __isset.JSON) {
          field.Name = "JSON";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          JSON.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BSON != null && __isset.BSON) {
          field.Name = "BSON";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          BSON.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UUID != null && __isset.UUID) {
          field.Name = "UUID";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          UUID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("LogicalType(");
      bool __first = true;
      if (STRING != null && __isset.@STRING) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("STRING: ");
        __sb.Append(STRING== null ? "<null>" : STRING.ToString());
      }
      if (MAP != null && __isset.MAP) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MAP: ");
        __sb.Append(MAP== null ? "<null>" : MAP.ToString());
      }
      if (LIST != null && __isset.LIST) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LIST: ");
        __sb.Append(LIST== null ? "<null>" : LIST.ToString());
      }
      if (ENUM != null && __isset.@ENUM) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ENUM: ");
        __sb.Append(ENUM== null ? "<null>" : ENUM.ToString());
      }
      if (DECIMAL != null && __isset.@DECIMAL) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DECIMAL: ");
        __sb.Append(DECIMAL== null ? "<null>" : DECIMAL.ToString());
      }
      if (DATE != null && __isset.DATE) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DATE: ");
        __sb.Append(DATE== null ? "<null>" : DATE.ToString());
      }
      if (TIME != null && __isset.TIME) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TIME: ");
        __sb.Append(TIME== null ? "<null>" : TIME.ToString());
      }
      if (TIMESTAMP != null && __isset.TIMESTAMP) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TIMESTAMP: ");
        __sb.Append(TIMESTAMP== null ? "<null>" : TIMESTAMP.ToString());
      }
      if (INTEGER != null && __isset.INTEGER) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("INTEGER: ");
        __sb.Append(INTEGER== null ? "<null>" : INTEGER.ToString());
      }
      if (UNKNOWN != null && __isset.UNKNOWN) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UNKNOWN: ");
        __sb.Append(UNKNOWN== null ? "<null>" : UNKNOWN.ToString());
      }
      if (JSON != null && __isset.JSON) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JSON: ");
        __sb.Append(JSON== null ? "<null>" : JSON.ToString());
      }
      if (BSON != null && __isset.BSON) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BSON: ");
        __sb.Append(BSON== null ? "<null>" : BSON.ToString());
      }
      if (UUID != null && __isset.UUID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UUID: ");
        __sb.Append(UUID== null ? "<null>" : UUID.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member