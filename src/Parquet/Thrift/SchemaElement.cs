#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Represents a element inside a schema definition.
   ///  - if it is a group (inner node) then type is undefined and num_children is defined
   ///  - if it is a primitive type (leaf) then type is defined and num_children is undefined
   /// the nodes are listed in depth first traversal order.
   /// </summary>
   public partial class SchemaElement : TBase
  {
    private Type _type;
    private int _type_length;
    private FieldRepetitionType _repetition_type;
    private int _num_children;
    private ConvertedType _converted_type;
    private int _scale;
    private int _precision;
    private int _field_id;
    private LogicalType _logicalType;

    /// <summary>
    /// Data type for this field. Not set if the current element is a non-leaf node
    /// 
    /// <seealso cref="Type"/>
    /// </summary>
    public Type Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the vales.
    /// Otherwise, if specified, this is the maximum bit length to store any of the values.
    /// (e.g. a low cardinality INT col could have this set to 3).  Note that this is
    /// in the schema, and therefore fixed for the entire file.
    /// </summary>
    public int Type_length
    {
      get
      {
        return _type_length;
      }
      set
      {
        __isset.type_length = true;
        this._type_length = value;
      }
    }

    /// <summary>
    /// repetition of the field. The root of the schema does not have a repetition_type.
    /// All other nodes must have one
    /// 
    /// <seealso cref="FieldRepetitionType"/>
    /// </summary>
    public FieldRepetitionType Repetition_type
    {
      get
      {
        return _repetition_type;
      }
      set
      {
        __isset.repetition_type = true;
        this._repetition_type = value;
      }
    }

    /// <summary>
    /// Name of the field in the schema
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Nested fields.  Since thrift does not support nested fields,
    /// the nesting is flattened to a single list by a depth-first traversal.
    /// The children count is used to construct the nested relationship.
    /// This field is not set when the element is a primitive type
    /// </summary>
    public int Num_children
    {
      get
      {
        return _num_children;
      }
      set
      {
        __isset.num_children = true;
        this._num_children = value;
      }
    }

    /// <summary>
    /// When the schema is the result of a conversion from another model
    /// Used to record the original type to help with cross conversion.
    /// 
    /// <seealso cref="ConvertedType"/>
    /// </summary>
    public ConvertedType Converted_type
    {
      get
      {
        return _converted_type;
      }
      set
      {
        __isset.converted_type = true;
        this._converted_type = value;
      }
    }

    /// <summary>
    /// Used when this column contains decimal data.
    /// See the DECIMAL converted type for more details.
    /// </summary>
    public int Scale
    {
      get
      {
        return _scale;
      }
      set
      {
        __isset.scale = true;
        this._scale = value;
      }
    }

    public int Precision
    {
      get
      {
        return _precision;
      }
      set
      {
        __isset.precision = true;
        this._precision = value;
      }
    }

    /// <summary>
    /// When the original schema supports field ids, this will save the
    /// original field id in the parquet schema
    /// </summary>
    public int Field_id
    {
      get
      {
        return _field_id;
      }
      set
      {
        __isset.field_id = true;
        this._field_id = value;
      }
    }

    /// <summary>
    /// The logical type of this SchemaElement
    /// 
    /// LogicalType replaces ConvertedType, but ConvertedType is still required
    /// for some logical types to ensure forward-compatibility in format v1.
    /// </summary>
    public LogicalType LogicalType
    {
      get
      {
        return _logicalType;
      }
      set
      {
        __isset.logicalType = true;
        this._logicalType = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool type_length;
      public bool repetition_type;
      public bool num_children;
      public bool converted_type;
      public bool scale;
      public bool precision;
      public bool field_id;
      public bool logicalType;
    }

    public SchemaElement()
    {
    }

    public SchemaElement(string name) : this()
    {
      this.Name = name;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (Type)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Type_length = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Repetition_type = (FieldRepetitionType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Num_children = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Converted_type = (ConvertedType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Scale = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Precision = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                Field_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                LogicalType = new LogicalType();
                await LogicalType.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("SchemaElement");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.type)
        {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.type_length)
        {
          field.Name = "type_length";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Type_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.repetition_type)
        {
          field.Name = "repetition_type";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Repetition_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.num_children)
        {
          field.Name = "num_children";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Num_children, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.converted_type)
        {
          field.Name = "converted_type";
          field.Type = TType.I32;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Converted_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.scale)
        {
          field.Name = "scale";
          field.Type = TType.I32;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Scale, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.precision)
        {
          field.Name = "precision";
          field.Type = TType.I32;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Precision, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.field_id)
        {
          field.Name = "field_id";
          field.Type = TType.I32;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Field_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (LogicalType != null && __isset.logicalType)
        {
          field.Name = "logicalType";
          field.Type = TType.Struct;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await LogicalType.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as SchemaElement;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
        && ((__isset.type_length == other.__isset.type_length) && ((!__isset.type_length) || (System.Object.Equals(Type_length, other.Type_length))))
        && ((__isset.repetition_type == other.__isset.repetition_type) && ((!__isset.repetition_type) || (System.Object.Equals(Repetition_type, other.Repetition_type))))
        && System.Object.Equals(Name, other.Name)
        && ((__isset.num_children == other.__isset.num_children) && ((!__isset.num_children) || (System.Object.Equals(Num_children, other.Num_children))))
        && ((__isset.converted_type == other.__isset.converted_type) && ((!__isset.converted_type) || (System.Object.Equals(Converted_type, other.Converted_type))))
        && ((__isset.scale == other.__isset.scale) && ((!__isset.scale) || (System.Object.Equals(Scale, other.Scale))))
        && ((__isset.precision == other.__isset.precision) && ((!__isset.precision) || (System.Object.Equals(Precision, other.Precision))))
        && ((__isset.field_id == other.__isset.field_id) && ((!__isset.field_id) || (System.Object.Equals(Field_id, other.Field_id))))
        && ((__isset.logicalType == other.__isset.logicalType) && ((!__isset.logicalType) || (System.Object.Equals(LogicalType, other.LogicalType))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
          hashcode = (hashcode * 397) + Type.GetHashCode();
        if(__isset.type_length)
          hashcode = (hashcode * 397) + Type_length.GetHashCode();
        if(__isset.repetition_type)
          hashcode = (hashcode * 397) + Repetition_type.GetHashCode();
        hashcode = (hashcode * 397) + Name.GetHashCode();
        if(__isset.num_children)
          hashcode = (hashcode * 397) + Num_children.GetHashCode();
        if(__isset.converted_type)
          hashcode = (hashcode * 397) + Converted_type.GetHashCode();
        if(__isset.scale)
          hashcode = (hashcode * 397) + Scale.GetHashCode();
        if(__isset.precision)
          hashcode = (hashcode * 397) + Precision.GetHashCode();
        if(__isset.field_id)
          hashcode = (hashcode * 397) + Field_id.GetHashCode();
        if(__isset.logicalType)
          hashcode = (hashcode * 397) + LogicalType.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("SchemaElement(");
      bool __first = true;
      if (__isset.type)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Type: ");
        sb.Append(Type);
      }
      if (__isset.type_length)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Type_length: ");
        sb.Append(Type_length);
      }
      if (__isset.repetition_type)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Repetition_type: ");
        sb.Append(Repetition_type);
      }
      if(!__first) { sb.Append(", "); }
      sb.Append("Name: ");
      sb.Append(Name);
      if (__isset.num_children)
      {
        sb.Append(", Num_children: ");
        sb.Append(Num_children);
      }
      if (__isset.converted_type)
      {
        sb.Append(", Converted_type: ");
        sb.Append(Converted_type);
      }
      if (__isset.scale)
      {
        sb.Append(", Scale: ");
        sb.Append(Scale);
      }
      if (__isset.precision)
      {
        sb.Append(", Precision: ");
        sb.Append(Precision);
      }
      if (__isset.field_id)
      {
        sb.Append(", Field_id: ");
        sb.Append(Field_id);
      }
      if (LogicalType != null && __isset.logicalType)
      {
        sb.Append(", LogicalType: ");
        sb.Append(LogicalType== null ? "<null>" : LogicalType.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
