#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// Description for ColumnIndex.
   /// Each &lt;array-field>[i] refers to the page at OffsetIndex.page_locations[i]
   /// </summary>
   public partial class ColumnIndex : TBase
  {
    private List<long> _null_counts;

    /// <summary>
    /// A list of Boolean values to determine the validity of the corresponding
    /// min and max values. If true, a page contains only null values, and writers
    /// have to set the corresponding entries in min_values and max_values to
    /// byte[0], so that all lists have the same length. If false, the
    /// corresponding entries in min_values and max_values must be valid.
    /// </summary>
    public List<bool> Null_pages { get; set; }

    /// <summary>
    /// Two lists containing lower and upper bounds for the values of each page.
    /// These may be the actual minimum and maximum values found on a page, but
    /// can also be (more compact) values that do not exist on a page. For
    /// example, instead of storing ""Blart Versenwald III", a writer may set
    /// min_values[i]="B", max_values[i]="C". Such more compact values must still
    /// be valid values within the column's logical type. Readers must make sure
    /// that list entries are populated before using them by inspecting null_pages.
    /// </summary>
    public List<byte[]> Min_values { get; set; }

    public List<byte[]> Max_values { get; set; }

    /// <summary>
    /// Stores whether both min_values and max_values are orderd and if so, in
    /// which direction. This allows readers to perform binary searches in both
    /// lists. Readers cannot assume that max_values[i] &lt;= min_values[i+1], even
    /// if the lists are ordered.
    /// 
    /// <seealso cref="BoundaryOrder"/>
    /// </summary>
    public BoundaryOrder Boundary_order { get; set; }

    /// <summary>
    /// A list containing the number of null values for each page *
    /// </summary>
    public List<long> Null_counts
    {
      get
      {
        return _null_counts;
      }
      set
      {
        __isset.null_counts = true;
        this._null_counts = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool null_counts;
    }

    public ColumnIndex()
    {
    }

    public ColumnIndex(List<bool> null_pages, List<byte[]> min_values, List<byte[]> max_values, BoundaryOrder boundary_order) : this()
    {
      this.Null_pages = null_pages;
      this.Min_values = min_values;
      this.Max_values = max_values;
      this.Boundary_order = boundary_order;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_null_pages = false;
        bool isset_min_values = false;
        bool isset_max_values = false;
        bool isset_boundary_order = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                  Null_pages = new List<bool>(_list32.Count);
                  for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    bool _elem34;
                    _elem34 = await iprot.ReadBoolAsync(cancellationToken);
                    Null_pages.Add(_elem34);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_null_pages = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list35 = await iprot.ReadListBeginAsync(cancellationToken);
                  Min_values = new List<byte[]>(_list35.Count);
                  for(int _i36 = 0; _i36 < _list35.Count; ++_i36)
                  {
                    byte[] _elem37;
                    _elem37 = await iprot.ReadBinaryAsync(cancellationToken);
                    Min_values.Add(_elem37);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_min_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list38 = await iprot.ReadListBeginAsync(cancellationToken);
                  Max_values = new List<byte[]>(_list38.Count);
                  for(int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    byte[] _elem40;
                    _elem40 = await iprot.ReadBinaryAsync(cancellationToken);
                    Max_values.Add(_elem40);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_max_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Boundary_order = (BoundaryOrder)await iprot.ReadI32Async(cancellationToken);
                isset_boundary_order = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list41 = await iprot.ReadListBeginAsync(cancellationToken);
                  Null_counts = new List<long>(_list41.Count);
                  for(int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    long _elem43;
                    _elem43 = await iprot.ReadI64Async(cancellationToken);
                    Null_counts.Add(_elem43);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_null_pages)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_min_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_max_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_boundary_order)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ColumnIndex");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "null_pages";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Bool, Null_pages.Count), cancellationToken);
          foreach (bool _iter44 in Null_pages)
          {
            await oprot.WriteBoolAsync(_iter44, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "min_values";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Min_values.Count), cancellationToken);
          foreach (byte[] _iter45 in Min_values)
          {
            await oprot.WriteBinaryAsync(_iter45, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "max_values";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Max_values.Count), cancellationToken);
          foreach (byte[] _iter46 in Max_values)
          {
            await oprot.WriteBinaryAsync(_iter46, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "boundary_order";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Boundary_order, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Null_counts != null && __isset.null_counts)
        {
          field.Name = "null_counts";
          field.Type = TType.List;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, Null_counts.Count), cancellationToken);
            foreach (long _iter47 in Null_counts)
            {
              await oprot.WriteI64Async(_iter47, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ColumnIndex;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Null_pages, other.Null_pages)
        && TCollections.Equals(Min_values, other.Min_values)
        && TCollections.Equals(Max_values, other.Max_values)
        && System.Object.Equals(Boundary_order, other.Boundary_order)
        && ((__isset.null_counts == other.__isset.null_counts) && ((!__isset.null_counts) || (TCollections.Equals(Null_counts, other.Null_counts))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_pages);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Min_values);
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Max_values);
        hashcode = (hashcode * 397) + Boundary_order.GetHashCode();
        if(__isset.null_counts)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_counts);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ColumnIndex(");
      sb.Append(", Null_pages: ");
      sb.Append(Null_pages);
      sb.Append(", Min_values: ");
      sb.Append(Min_values);
      sb.Append(", Max_values: ");
      sb.Append(Max_values);
      sb.Append(", Boundary_order: ");
      sb.Append(Boundary_order);
      if (Null_counts != null && __isset.null_counts)
      {
        sb.Append(", Null_counts: ");
        sb.Append(Null_counts);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
