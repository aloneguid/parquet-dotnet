#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// The hash function used in Bloom filter. This function takes the hash of a column value
   /// using plain encoding.
   /// 
   /// </summary>
   public partial class BloomFilterHash : TBase
  {
    private XxHash _XXHASH;

    /// <summary>
    /// xxHash Strategy. *
    /// </summary>
    public XxHash XXHASH
    {
      get
      {
        return _XXHASH;
      }
      set
      {
        __isset.XXHASH = true;
        this._XXHASH = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool XXHASH;
    }

    public BloomFilterHash()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                XXHASH = new XxHash();
                await XXHASH.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BloomFilterHash");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (XXHASH != null && __isset.XXHASH)
        {
          field.Name = "XXHASH";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await XXHASH.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as BloomFilterHash;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.XXHASH == other.__isset.XXHASH) && ((!__isset.XXHASH) || (System.Object.Equals(XXHASH, other.XXHASH))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.XXHASH)
          hashcode = (hashcode * 397) + XXHASH.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BloomFilterHash(");
      bool __first = true;
      if (XXHASH != null && __isset.XXHASH)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("XXHASH: ");
        sb.Append(XXHASH== null ? "<null>" : XXHASH.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
