#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


namespace Parquet.Thrift
{

   /// <summary>
   /// New page format allowing reading levels without decompressing the data
   /// Repetition and definition levels are uncompressed
   /// The remaining section containing the data is compressed if is_compressed is true
   /// 
   /// </summary>
   public partial class DataPageHeaderV2 : TBase
  {
    private bool _is_compressed;
    private Statistics _statistics;

    /// <summary>
    /// Number of values, including NULLs, in this data page. *
    /// </summary>
    public int Num_values { get; set; }

    /// <summary>
    /// Number of NULL values, in this data page.
    /// Number of non-null = num_values - num_nulls which is also the number of values in the data section *
    /// </summary>
    public int Num_nulls { get; set; }

    /// <summary>
    /// Number of rows in this data page. which means pages change on record boundaries (r = 0) *
    /// </summary>
    public int Num_rows { get; set; }

    /// <summary>
    /// Encoding used for data in this page *
    /// 
    /// <seealso cref="Encoding"/>
    /// </summary>
    public Encoding Encoding { get; set; }

    /// <summary>
    /// length of the definition levels
    /// </summary>
    public int Definition_levels_byte_length { get; set; }

    /// <summary>
    /// length of the repetition levels
    /// </summary>
    public int Repetition_levels_byte_length { get; set; }

    /// <summary>
    /// whether the values are compressed.
    /// Which means the section of the page between
    /// definition_levels_byte_length + repetition_levels_byte_length + 1 and compressed_page_size (included)
    /// is compressed with the compression_codec.
    /// If missing it is considered compressed
    /// </summary>
    public bool Is_compressed
    {
      get
      {
        return _is_compressed;
      }
      set
      {
        __isset.is_compressed = true;
        this._is_compressed = value;
      }
    }

    /// <summary>
    /// optional statistics for the data in this page *
    /// </summary>
    public Statistics Statistics
    {
      get
      {
        return _statistics;
      }
      set
      {
        __isset.statistics = true;
        this._statistics = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool is_compressed;
      public bool statistics;
    }

    public DataPageHeaderV2()
    {
      this._is_compressed = true;
      this.__isset.is_compressed = true;
    }

    public DataPageHeaderV2(int num_values, int num_nulls, int num_rows, Encoding encoding, int definition_levels_byte_length, int repetition_levels_byte_length) : this()
    {
      this.Num_values = num_values;
      this.Num_nulls = num_nulls;
      this.Num_rows = num_rows;
      this.Encoding = encoding;
      this.Definition_levels_byte_length = definition_levels_byte_length;
      this.Repetition_levels_byte_length = repetition_levels_byte_length;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_num_values = false;
        bool isset_num_nulls = false;
        bool isset_num_rows = false;
        bool isset_encoding = false;
        bool isset_definition_levels_byte_length = false;
        bool isset_repetition_levels_byte_length = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Num_values = await iprot.ReadI32Async(cancellationToken);
                isset_num_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Num_nulls = await iprot.ReadI32Async(cancellationToken);
                isset_num_nulls = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Num_rows = await iprot.ReadI32Async(cancellationToken);
                isset_num_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Encoding = (Encoding)await iprot.ReadI32Async(cancellationToken);
                isset_encoding = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Definition_levels_byte_length = await iprot.ReadI32Async(cancellationToken);
                isset_definition_levels_byte_length = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Repetition_levels_byte_length = await iprot.ReadI32Async(cancellationToken);
                isset_repetition_levels_byte_length = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                Is_compressed = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                Statistics = new Statistics();
                await Statistics.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_num_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_nulls)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_encoding)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_definition_levels_byte_length)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_repetition_levels_byte_length)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DataPageHeaderV2");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "num_values";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Num_values, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "num_nulls";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Num_nulls, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "num_rows";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Num_rows, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "encoding";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Encoding, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "definition_levels_byte_length";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Definition_levels_byte_length, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "repetition_levels_byte_length";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Repetition_levels_byte_length, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.is_compressed)
        {
          field.Name = "is_compressed";
          field.Type = TType.Bool;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Is_compressed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Statistics != null && __isset.statistics)
        {
          field.Name = "statistics";
          field.Type = TType.Struct;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Statistics.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DataPageHeaderV2;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Num_values, other.Num_values)
        && System.Object.Equals(Num_nulls, other.Num_nulls)
        && System.Object.Equals(Num_rows, other.Num_rows)
        && System.Object.Equals(Encoding, other.Encoding)
        && System.Object.Equals(Definition_levels_byte_length, other.Definition_levels_byte_length)
        && System.Object.Equals(Repetition_levels_byte_length, other.Repetition_levels_byte_length)
        && ((__isset.is_compressed == other.__isset.is_compressed) && ((!__isset.is_compressed) || (System.Object.Equals(Is_compressed, other.Is_compressed))))
        && ((__isset.statistics == other.__isset.statistics) && ((!__isset.statistics) || (System.Object.Equals(Statistics, other.Statistics))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Num_values.GetHashCode();
        hashcode = (hashcode * 397) + Num_nulls.GetHashCode();
        hashcode = (hashcode * 397) + Num_rows.GetHashCode();
        hashcode = (hashcode * 397) + Encoding.GetHashCode();
        hashcode = (hashcode * 397) + Definition_levels_byte_length.GetHashCode();
        hashcode = (hashcode * 397) + Repetition_levels_byte_length.GetHashCode();
        if(__isset.is_compressed)
          hashcode = (hashcode * 397) + Is_compressed.GetHashCode();
        if(__isset.statistics)
          hashcode = (hashcode * 397) + Statistics.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DataPageHeaderV2(");
      sb.Append(", Num_values: ");
      sb.Append(Num_values);
      sb.Append(", Num_nulls: ");
      sb.Append(Num_nulls);
      sb.Append(", Num_rows: ");
      sb.Append(Num_rows);
      sb.Append(", Encoding: ");
      sb.Append(Encoding);
      sb.Append(", Definition_levels_byte_length: ");
      sb.Append(Definition_levels_byte_length);
      sb.Append(", Repetition_levels_byte_length: ");
      sb.Append(Repetition_levels_byte_length);
      if (__isset.is_compressed)
      {
        sb.Append(", Is_compressed: ");
        sb.Append(Is_compressed);
      }
      if (Statistics != null && __isset.statistics)
      {
        sb.Append(", Statistics: ");
        sb.Append(Statistics== null ? "<null>" : Statistics.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
