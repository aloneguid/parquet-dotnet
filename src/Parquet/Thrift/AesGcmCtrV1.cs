#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;

namespace Parquet.Thrift
{

  public partial class AesGcmCtrV1 : TBase
  {
    private byte[] _aad_prefix;
    private byte[] _aad_file_unique;
    private bool _supply_aad_prefix;

    /// <summary>
    /// AAD prefix *
    /// </summary>
    public byte[] Aad_prefix
    {
      get
      {
        return _aad_prefix;
      }
      set
      {
        __isset.aad_prefix = true;
        this._aad_prefix = value;
      }
    }

    /// <summary>
    /// Unique file identifier part of AAD suffix *
    /// </summary>
    public byte[] Aad_file_unique
    {
      get
      {
        return _aad_file_unique;
      }
      set
      {
        __isset.aad_file_unique = true;
        this._aad_file_unique = value;
      }
    }

    /// <summary>
    /// In files encrypted with AAD prefix without storing it,
    /// readers must supply the prefix *
    /// </summary>
    public bool Supply_aad_prefix
    {
      get
      {
        return _supply_aad_prefix;
      }
      set
      {
        __isset.supply_aad_prefix = true;
        this._supply_aad_prefix = value;
      }
    }


    public Isset __isset;
    public struct Isset {
      public bool aad_prefix;
      public bool aad_file_unique;
      public bool supply_aad_prefix;
    }

    public AesGcmCtrV1() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Aad_prefix = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Aad_file_unique = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Supply_aad_prefix = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AesGcmCtrV1");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Aad_prefix != null && __isset.aad_prefix) {
          field.Name = "aad_prefix";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Aad_prefix);
          oprot.WriteFieldEnd();
        }
        if (Aad_file_unique != null && __isset.aad_file_unique) {
          field.Name = "aad_file_unique";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Aad_file_unique);
          oprot.WriteFieldEnd();
        }
        if (__isset.supply_aad_prefix) {
          field.Name = "supply_aad_prefix";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Supply_aad_prefix);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AesGcmCtrV1(");
      bool __first = true;
      if (Aad_prefix != null && __isset.aad_prefix) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aad_prefix: ");
        __sb.Append(Aad_prefix);
      }
      if (Aad_file_unique != null && __isset.aad_file_unique) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Aad_file_unique: ");
        __sb.Append(Aad_file_unique);
      }
      if (__isset.supply_aad_prefix) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Supply_aad_prefix: ");
        __sb.Append(Supply_aad_prefix);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member