<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var supportedTypes = new[] {
        new { Type = "short", BitPackingType = "int", RequiresConversion = true },
        new { Type = "ushort", BitPackingType = "int", RequiresConversion = true },
        new { Type = "int", BitPackingType = "int", RequiresConversion = false },
        new { Type = "uint", BitPackingType = "long", RequiresConversion = true },
        new { Type = "long", BitPackingType = "long", RequiresConversion = false },
        new { Type = "ulong", BitPackingType = "long", RequiresConversion = true }
    };
#>
namespace Parquet.Encodings {
    using System;
    using System.IO;
    using Parquet.Extensions;

    static partial class DeltaBinaryPackedEncoder {
<# foreach(var config in supportedTypes) {
    string nt = config.Type;
    string bitPackingType = config.BitPackingType;
    bool requiresConversion = config.RequiresConversion;
    string ntCap = nt.Substring(0, 1).ToUpper() + nt.Substring(1);#>

        private static void Flush<#=ntCap#>Block(Span<<#=nt#>> block, <#=nt#> minDelta,
            Stream destination,
            int miniblockCount, int miniblockSize) {

            // min delta can be flushed immediately
            destination.WriteULEB128((ulong)((long)minDelta).ZigZagEncode());

            // subtract minDelta from all values
            for(int i = 0; i < block.Length; i++) {
<# if (requiresConversion && (nt == "short" || nt == "ushort")) { #>
                block[i] = (<#=nt#>)(block[i] - minDelta);
<# } else { #>
                block[i] = block[i] - minDelta;
<# } #>
            }

            // we need bit widths for each miniblock (after minDelta is applied)
            Span<byte> bitWidths = stackalloc byte[miniblockCount];

            for(int offset = 0, bwi = 0; offset < block.Length; offset += miniblockSize, bwi++) {
                int count = Math.Min(miniblockSize, block.Length - offset);
                if(count < 0)
                    break;

                int bitwidth = block.Slice(offset, count).CalculateBitWidth();
                bitWidths[bwi] = (byte)bitwidth;
            }

            // write bit widths
            destination.WriteSpan(bitWidths);

            // each miniblock is a list of bit packed ints according to the bit width stored at the begining of the block
<# if (requiresConversion) { #>
            Span<<#=bitPackingType#>> raw8 = stackalloc <#=bitPackingType#>[8];
<# } else { #>
            Span<<#=nt#>> raw8 = stackalloc <#=nt#>[8];
<# } #>
            for(int i = 0; i < miniblockCount; i++) {
                int offset = i * miniblockSize;
                int count = Math.Min(miniblockSize, block.Length - offset);
                if(count < 1)
                    break;
                Span<<#=nt#>> miniblockData = block.Slice(offset, count);
                // write values in 8
                int bitWidth = bitWidths[i];
                byte[] encoded8 = new byte[bitWidth];
                for(int iv = 0; iv < miniblockData.Length; iv += 8) {
                    int count8 = Math.Min(8, miniblockData.Length - iv);
<# if (requiresConversion) { #>
                    // Convert to bit packing type for bit packing
                    for(int j = 0; j < count8; j++) {
                        raw8[j] = (<#=bitPackingType#>)miniblockData[iv + j];
                    }
                    for(int j = count8; j < 8; j++) {
                        raw8[j] = 0;
                    }
<# } else { #>
                    miniblockData.Slice(iv, count8).CopyTo(raw8);
<# } #>
                    BitPackedEncoder.Pack8ValuesLE(raw8, encoded8, bitWidth);
                    destination.Write(encoded8, 0, bitWidth);
                }
            }
        }

        private static void Encode<#=ntCap#>(ReadOnlySpan<<#=nt#>> data, Stream destination,
            int blockSize, int miniblockSize) {

            if(data.Length == 0)
                return;

            // header: <block size in values> <number of miniblocks in a block> <total value count> <first value>
            int miniblockCount = blockSize / miniblockSize;
            destination.WriteULEB128((ulong)blockSize);
            destination.WriteULEB128((ulong)miniblockCount);
            destination.WriteULEB128((ulong)data.Length);
            destination.WriteULEB128((ulong)((long)data[0]).ZigZagEncode());

            // each block: <min delta> <list of bitwidths of miniblocks> <miniblocks>
            Span<<#=nt#>> block = stackalloc <#=nt#>[blockSize];
            int blockCount = 0;
            <#=nt#> minDelta = 0;
            for(int i = 1; i < data.Length; i++) {

                // calculate delta element and minDelta
<# if (requiresConversion && (nt == "short" || nt == "ushort")) { #>
                <#=nt#> delta = (<#=nt#>)(data[i] - data[i - 1]);
<# } else { #>
                <#=nt#> delta = data[i] - data[i - 1];
<# } #>
                if(blockCount == 0 || delta < minDelta) {
                    minDelta = delta;
                }
                block[blockCount++] = delta;

                // write block
                if(blockCount == blockSize) {
                    Flush<#=ntCap#>Block(block.Slice(0, blockCount), minDelta, destination, miniblockCount, miniblockSize);
                    blockCount = 0;
                }
            }

            if(blockCount > 0) {
                while(blockCount < blockSize) {
                    block[blockCount++] = minDelta;
                }
                Flush<#=ntCap#>Block(block.Slice(0, blockCount), minDelta, destination, miniblockCount, miniblockSize);
            }
        }

        private static int Decode<#=ntCap#>(Span<byte> s, Span<<#= nt#>> dest, out int consumedBytes) {

            int spos = 0;

            // The header is defined as follows:
            // <block size in values> <number of miniblocks in a block> <total value count> <first value>

            int blockSizeInValues = (int)s.ULEB128Decode(ref spos);
            int miniblocksInABlock = (int)s.ULEB128Decode(ref spos);
            int totalValueCount = (int)s.ULEB128Decode(ref spos);           // theoretically equal to "valueCount" param
            <#= nt#> firstValue = (<#= nt#>)s.ReadZigZagVarLong(ref spos);            // the actual first value

            if(totalValueCount == 0) {
                consumedBytes = spos;
                return 0;
            } else if(totalValueCount == 1) {
                dest[0] = firstValue;
                consumedBytes = spos;
                return 1;
            }

            int valuesPerMiniblock = blockSizeInValues / miniblocksInABlock;
<# if (requiresConversion) { #>
            <#= bitPackingType#>[] vbuf = new <#= bitPackingType#>[valuesPerMiniblock];
<# } else { #>
            <#= nt#>[] vbuf = new <#= nt#>[valuesPerMiniblock];
<# } #>

            // Each block contains
            // <min delta> <list of bitwidths of miniblocks> <miniblocks>

            <#= nt#> currentValue = firstValue;
            int read = 1;
            int destOffset = 0;
            dest[destOffset++] = firstValue;
            while(read < totalValueCount && spos < s.Length) {
                <#= nt#> minDelta = (<#= nt#>)s.ReadZigZagVarLong(ref spos);

                Span<byte> bitWidths = s.Slice(spos, Math.Min(miniblocksInABlock, s.Length - spos));
                spos += miniblocksInABlock;
                foreach(byte bitWidth in bitWidths) {

                    // unpack miniblock

                    if(read >= totalValueCount)
                        break;

                    if(bitWidth == 0) {
                        // there's not data for bitwidth 0
                        for(int i = 0; i < valuesPerMiniblock && destOffset < dest.Length; i++, read++) {
                            if(read >= totalValueCount)
                                break;
<# if (requiresConversion && (nt == "short" || nt == "ushort")) { #>
                            currentValue = (<#=nt#>)(currentValue + minDelta);
<# } else { #>
                            currentValue += minDelta;
<# } #>
                            dest[destOffset++] = currentValue;
                        }
                    } else {

                        // mini block has a size of 8*n, unpack 8 values each time
                        for(int j = 0; j < valuesPerMiniblock && spos < s.Length; j += 8) {
                            BitPackedEncoder.Unpack8ValuesLE(s.Slice(Math.Min(spos, s.Length)), vbuf.AsSpan(j), bitWidth);
                            spos += bitWidth;
                        }

                        for(int i = 0; i < vbuf.Length && destOffset < dest.Length && read < totalValueCount; i++, read++) {
<# if (requiresConversion && (nt == "short" || nt == "ushort")) { #>
                            currentValue = (<#=nt#>)(currentValue + minDelta + (<#=nt#>)vbuf[i]);
<# } else if (requiresConversion) { #>
                            currentValue += (<#=nt#>)(minDelta + (<#=nt#>)vbuf[i]);
<# } else { #>
                            currentValue += minDelta + vbuf[i];
<# } #>
                            dest[destOffset++] = currentValue;
                        }

                    }
                }
            }

            consumedBytes = spos;
            return read;
        }
<# } #>
    }
}